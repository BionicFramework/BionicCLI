{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Build web apps Blazor fast that run at WASM speed ! About Bionic is an Ionic Framework CLI clone for Blazor projects. The goal is to provide an easy, modular, and repeatable way of creating, building, and deploying Blazor projects. Keep in mind that just like Blazor, this is an exploration project. With your help we can make it a reality. Features SCSS Style Isolation: Pages and components have their own SCSS file for quick and easy styling. Hot Rebuild: Automatically rebuild modified source or SCSS code (hot reloading not available, yet). Component Generation: Quickly generate Blazor pages, layouts, components, and services. Modular Platform Architecture: Project deployment platforms are provided through plugins and isolated within each project. Blast Scripting: Execute a group of commands under a single target name. Why With the introduction of WebAssembly (WASM) in the browser, it is now possible to use languages other than JavaScript to build amazing web apps that run at near native speed. This means that many languages can now share code between frontend and backend without having to compromise computation power and typesafety as often happens in the world of JavaScript. WebAssembly is maturing and will soon provide more functionality such as Garbage Collection, Multi-Threading, and much more. With the creation of Blazor, Steve Sanderson made the promise of having WebAssembly on the frontend for web applications a reality. At this point, marrying the power of Blazor with the power of a CLI simply made sense. Hope you all have fun Blazing through some cool apps!","title":"Home"},{"location":"#about","text":"Bionic is an Ionic Framework CLI clone for Blazor projects. The goal is to provide an easy, modular, and repeatable way of creating, building, and deploying Blazor projects. Keep in mind that just like Blazor, this is an exploration project. With your help we can make it a reality.","title":"About"},{"location":"#features","text":"SCSS Style Isolation: Pages and components have their own SCSS file for quick and easy styling. Hot Rebuild: Automatically rebuild modified source or SCSS code (hot reloading not available, yet). Component Generation: Quickly generate Blazor pages, layouts, components, and services. Modular Platform Architecture: Project deployment platforms are provided through plugins and isolated within each project. Blast Scripting: Execute a group of commands under a single target name.","title":"Features"},{"location":"#why","text":"With the introduction of WebAssembly (WASM) in the browser, it is now possible to use languages other than JavaScript to build amazing web apps that run at near native speed. This means that many languages can now share code between frontend and backend without having to compromise computation power and typesafety as often happens in the world of JavaScript. WebAssembly is maturing and will soon provide more functionality such as Garbage Collection, Multi-Threading, and much more. With the creation of Blazor, Steve Sanderson made the promise of having WebAssembly on the frontend for web applications a reality. At this point, marrying the power of Blazor with the power of a CLI simply made sense. Hope you all have fun Blazing through some cool apps!","title":"Why"},{"location":"0_install/","text":"Install Bionic Before you install A few things are required to be installed before bionic can be used. If you already have them installed, just skip ahead. .Net Core SDK Because Bionic builds on the top of the amazing Blazor project, the first thing you need to do is to install .Net Core SDK . Tip If you are not using Visual Studio, installing .Net Core SDK will suffice. Check if dotnet is installed: dotnet --version 2.1.402 Blazor requires version 2.1.300 or above. SASS/SCSS compiler Bionic uses SASS/SCSS for styling and requires an SCSS compiler. Please install SASS compiler. Check if SCSS is installed: sass --version 1.13.1 or, depending on which version you have installed: sass --version Ruby Sass 3.5.6 Installing Bionic Bionic releases are available through NuGet . To install it execute: dotnet tool install --global Bionic You can invoke the tool using the following command: bionic Tool bionic (version 1.0.17 ) was successfully installed. And check if it was installed by executing: bionic -v \ud83e\udd16 Bionic v1.0.17 Updating Bionic To update execute: bionic update Tool bionic was reinstalled with the latest stable version (version 1.0.17 ). Removing Bionic To remove execute: bionic uninstall Tool bionic (version 1.0.17 ) was successfully uninstalled.","title":"Install Bionic"},{"location":"0_install/#install-bionic","text":"","title":"Install Bionic"},{"location":"0_install/#before-you-install","text":"A few things are required to be installed before bionic can be used. If you already have them installed, just skip ahead.","title":"Before you install"},{"location":"0_install/#net-core-sdk","text":"Because Bionic builds on the top of the amazing Blazor project, the first thing you need to do is to install .Net Core SDK . Tip If you are not using Visual Studio, installing .Net Core SDK will suffice. Check if dotnet is installed: dotnet --version 2.1.402 Blazor requires version 2.1.300 or above.","title":".Net Core SDK"},{"location":"0_install/#sassscss-compiler","text":"Bionic uses SASS/SCSS for styling and requires an SCSS compiler. Please install SASS compiler. Check if SCSS is installed: sass --version 1.13.1 or, depending on which version you have installed: sass --version Ruby Sass 3.5.6","title":"SASS/SCSS compiler"},{"location":"0_install/#installing-bionic","text":"Bionic releases are available through NuGet . To install it execute: dotnet tool install --global Bionic You can invoke the tool using the following command: bionic Tool bionic (version 1.0.17 ) was successfully installed. And check if it was installed by executing: bionic -v \ud83e\udd16 Bionic v1.0.17","title":"Installing Bionic"},{"location":"0_install/#updating-bionic","text":"To update execute: bionic update Tool bionic was reinstalled with the latest stable version (version 1.0.17 ).","title":"Updating Bionic"},{"location":"0_install/#removing-bionic","text":"To remove execute: bionic uninstall Tool bionic (version 1.0.17 ) was successfully uninstalled.","title":"Removing Bionic"},{"location":"blast/","text":"Blast Scripting Blast scripts are easy to use and organize. They allow you to easily set up build/task sequences. In your Blazor project Client or Standalone directory, use your favorite text editor or IDE to create or edit .bionic/bionic.blast Add the following content and save it: :electron electron-init electron-build :electron-init bionic platform add electron bionic platform electron init :electron-build dotnet build bionic platform electron build bionic platform electron serve Lines starting with: : - targets - sub-targets. Make sure that there are no spaces after it. Any other type of line is a cli command. Then have bionic blast it away: bionic blast electron - Install Electron Plugin and prepare project for Electron. The above task is to be done once since it is installing Plugin and initializing project. For subsequent deployments you should only need: bionic blast electron-build - Build Blazor project and serve Electron. Blast scripts not executing? There's a bug in dotnet tools that is preventing bionic tool from being found in the system path. There are several solutions. If you are in OSX, just edit /etc/paths.d/dotnet-cli-tools to be $HOME/.dotnet/tools . Did not try in Linux, but you may have to do the same or just edit your shell init script accordingly.","title":"Blast Scripting"},{"location":"blast/#blast-scripting","text":"Blast scripts are easy to use and organize. They allow you to easily set up build/task sequences. In your Blazor project Client or Standalone directory, use your favorite text editor or IDE to create or edit .bionic/bionic.blast Add the following content and save it: :electron electron-init electron-build :electron-init bionic platform add electron bionic platform electron init :electron-build dotnet build bionic platform electron build bionic platform electron serve Lines starting with: : - targets - sub-targets. Make sure that there are no spaces after it. Any other type of line is a cli command. Then have bionic blast it away: bionic blast electron - Install Electron Plugin and prepare project for Electron. The above task is to be done once since it is installing Plugin and initializing project. For subsequent deployments you should only need: bionic blast electron-build - Build Blazor project and serve Electron.","title":"Blast Scripting"},{"location":"blast/#blast-scripts-not-executing","text":"There's a bug in dotnet tools that is preventing bionic tool from being found in the system path. There are several solutions. If you are in OSX, just edit /etc/paths.d/dotnet-cli-tools to be $HOME/.dotnet/tools . Did not try in Linux, but you may have to do the same or just edit your shell init script accordingly.","title":"Blast scripts not executing?"},{"location":"commands/","text":"Commands","title":"Commands"},{"location":"commands/#commands","text":"","title":"Commands"},{"location":"getting-started/","text":"Getting Started If you haven't done so, please install Bionic first. Create a Blazor project First, create a Blazor Standalone or Hosted project using Blazor Templates. You can check for the available templates using: dotnet new -l Among others, the following templates should be available: Templates Short Name Language Tags ------------------------------------------------------------------------------------------------------------------------------- Blazor (hosted in ASP.NET server) blazorhosted [C#] Web/Blazor/Hosted Blazor Library blazorlib [C#] Web/Blazor/Library Blazor (Server-side in ASP.NET Core) blazorserverside [C#] Web/Blazor/ServerSide Blazor (standalone) blazor [C#] Web/Blazor/Standalone If the above templates are not available, then install them using: dotnet new -i Microsoft.AspNetCore.Blazor.Templates Create and build a Blazor Standalone project: dotnet new blazor -o BlazorApp cd BlazorApp dotnet run ... Now listening on: http://localhost:5000 Now listening on: https://localhost:5001 Application started. Press Ctrl+C to shut down. Finally, point your browser to http://localhost:5000 and verify that the app is running. You can shut down the server once you've verified that it is working. Initializing Bionic Before we can do anything else with Bionic, we need to first initialize our project with it. This step is only required once per project. bionic start Serving Bionic for the first time You can now build and serve your project. This command will also rebuild whenever a source code or scss change is detected. bionic serve Please note that it will not hot-reload the page for you. You'll have to keep an eye on the server and reload when compilation has completed. Bionic is your friend Bionic command line can help you. You can continue to add --help to longer commands for contextual help. bionic --help Generating Services (AKA Providers) for your project Services require both an interface and its implementation. In addition, they also need to be registered with the Dependency Injection service before being used. With Bionic, the [Injectable] attribute is used to inject the service automatically minimizing the amount of changes required. Let's start by creating a new CounterService for the project: bionic generate service CounterService \ud83d\ude80 Generating a service named CounterService The template Bionic Service Template was created successfully. This will create: Services/Interfaces/ICounterService.cs Services/CounterService.cs Open the created files using your favorite editor or IDE. Update your ICounterService interface to look like: public interface ICounterService { int count { get ; set ;} void Increment (); } And your CounterService implementation to look like: using BionicExtensions.Attributes ; [Injectable(typeof(ICounterService))] public class CounterService : ICounterService { public int count { get ; set ;} = 0 ; public void Increment () = count ++; } Generating a new Component Pages, Layouts, Components and Services can also be generated through an interactive CLI process: bionic bionic -g What would you like to generate? (component, layout, page or service/provider): component How would you like to name your component? CounterComponent \ud83d\ude80 Generating a component named CounterComponent The template Bionic Component Template was created successfully. This will create: Component/ CounterComponent.cshtml CounterComponent.scss Let's implements the CounterComponent.cshtml to be: @using Microsoft.AspNetCore.Blazor.Components @inject ICounterService CounterService; div component = CounterComponent h1 Counter / h1 p Current count: @CounterService.count / p button class = btn btn-primary onclick = @CounterService.Increment Click me / button / div @functions { // Add your component functions here } And update your CounterComponent.scss to: div [ component = CounterComponent ] { h1 { font-weight : bold ; color : cornflowerblue ; } button { background-color : coral ; } } Now edit you Pages/Counter.cshtml page and set it to: @page /counter CounterComponent / @functions { } Let bionic serve complete the build and then refresh your browser to contemplate the final result. You can now pick and choose where else you would like to deploy your app: Android , Electron or iOS","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"If you haven't done so, please install Bionic first.","title":"Getting Started"},{"location":"getting-started/#create-a-blazor-project","text":"First, create a Blazor Standalone or Hosted project using Blazor Templates. You can check for the available templates using: dotnet new -l Among others, the following templates should be available: Templates Short Name Language Tags ------------------------------------------------------------------------------------------------------------------------------- Blazor (hosted in ASP.NET server) blazorhosted [C#] Web/Blazor/Hosted Blazor Library blazorlib [C#] Web/Blazor/Library Blazor (Server-side in ASP.NET Core) blazorserverside [C#] Web/Blazor/ServerSide Blazor (standalone) blazor [C#] Web/Blazor/Standalone If the above templates are not available, then install them using: dotnet new -i Microsoft.AspNetCore.Blazor.Templates Create and build a Blazor Standalone project: dotnet new blazor -o BlazorApp cd BlazorApp dotnet run ... Now listening on: http://localhost:5000 Now listening on: https://localhost:5001 Application started. Press Ctrl+C to shut down. Finally, point your browser to http://localhost:5000 and verify that the app is running. You can shut down the server once you've verified that it is working.","title":"Create a Blazor project"},{"location":"getting-started/#initializing-bionic","text":"Before we can do anything else with Bionic, we need to first initialize our project with it. This step is only required once per project. bionic start","title":"Initializing Bionic"},{"location":"getting-started/#serving-bionic-for-the-first-time","text":"You can now build and serve your project. This command will also rebuild whenever a source code or scss change is detected. bionic serve Please note that it will not hot-reload the page for you. You'll have to keep an eye on the server and reload when compilation has completed.","title":"Serving Bionic for the first time"},{"location":"getting-started/#bionic-is-your-friend","text":"Bionic command line can help you. You can continue to add --help to longer commands for contextual help. bionic --help","title":"Bionic is your friend"},{"location":"getting-started/#generating-services-aka-providers-for-your-project","text":"Services require both an interface and its implementation. In addition, they also need to be registered with the Dependency Injection service before being used. With Bionic, the [Injectable] attribute is used to inject the service automatically minimizing the amount of changes required. Let's start by creating a new CounterService for the project: bionic generate service CounterService \ud83d\ude80 Generating a service named CounterService The template Bionic Service Template was created successfully. This will create: Services/Interfaces/ICounterService.cs Services/CounterService.cs Open the created files using your favorite editor or IDE. Update your ICounterService interface to look like: public interface ICounterService { int count { get ; set ;} void Increment (); } And your CounterService implementation to look like: using BionicExtensions.Attributes ; [Injectable(typeof(ICounterService))] public class CounterService : ICounterService { public int count { get ; set ;} = 0 ; public void Increment () = count ++; }","title":"Generating Services (AKA Providers) for your project"},{"location":"getting-started/#generating-a-new-component","text":"Pages, Layouts, Components and Services can also be generated through an interactive CLI process: bionic bionic -g What would you like to generate? (component, layout, page or service/provider): component How would you like to name your component? CounterComponent \ud83d\ude80 Generating a component named CounterComponent The template Bionic Component Template was created successfully. This will create: Component/ CounterComponent.cshtml CounterComponent.scss Let's implements the CounterComponent.cshtml to be: @using Microsoft.AspNetCore.Blazor.Components @inject ICounterService CounterService; div component = CounterComponent h1 Counter / h1 p Current count: @CounterService.count / p button class = btn btn-primary onclick = @CounterService.Increment Click me / button / div @functions { // Add your component functions here } And update your CounterComponent.scss to: div [ component = CounterComponent ] { h1 { font-weight : bold ; color : cornflowerblue ; } button { background-color : coral ; } } Now edit you Pages/Counter.cshtml page and set it to: @page /counter CounterComponent / @functions { } Let bionic serve complete the build and then refresh your browser to contemplate the final result. You can now pick and choose where else you would like to deploy your app: Android , Electron or iOS","title":"Generating a new Component"},{"location":"live-reload/","text":"Bionic Monitor Bionic Monitor provides live reloading capability to both Standalone and Hosted Blazor projects. Install Bionic Monitor dotnet tool install -g BionicMonitor How it works By default, Bionic Monitor looks for changes in wwwroot and bin/Debug/netstandard2.0/dist and automatically reload the page when a change is detected. For this to happen, Bionic Monitor has to inject SignalR and respective handling functions. If your project already includes SignalR JS Client library then you can set Bionic Monitor to skip its injection (see --signalRProvided ). If you run Bionic Monitor without any further arguments in the client or standalone project: biomon Notice that wwwroot/index.html will be injected with the two JS source entries mentioned earlier. This is alright for a first test but suboptimal for development since source code should not be modified. Because of this, Bionic Monitor can be instructed to work from a replica of wwwroot. This can be done by specifying one of the following options: --bionic : Uses .bionic/wwwroot as destination root directory --destinationRootDir : Set a user specified destination root directory Check biomon --help for more details and options. Standalone project setup Add the following to you .csproj file (client side): ItemGroup WwwRootFiles Include= wwwroot/**/*.* / /ItemGroup Target Name= CopyAssets AfterTargets= Build Message Importance= high Text= Copying.... / Copy SourceFiles= @(WwwRootFiles) DestinationFiles= .bionic/wwwroot/%(RecursiveDir)/%(Filename)%(Extension) SkipUnchangedFiles= false / /Target The above target will synchronize your destination root directory with the latest content changes in wwwroot directory. Notice that above example is using .bionic/wwwroot as its destination root directory. Replace it with your destination root directory. Finally, if you have kept .bionic/wwwroot then start Bionic Monitor using: biomon --bionic or, if you are using another destination root directory: biomon --destinationRootDirectory my/other/directory Once Bionic Monitor is running, the page will be automatically reloaded every-time you build your app. Hosted project setup Hosted uses the same setup as Standalone and opens CORS on the Hosted Server. On the .Client project start Bionic Monitor on specific ports different than the one being used by the .Server : biomon --bionic --port 3434 --securePort 3535 Add the following to .Server Startup.cs file: public void ConfigureServices ( IServiceCollection services ) { ... // Add the following line before AddMvc services . AddCors ( options = options . AddPolicy ( AllowDevClient , builder = builder . WithOrigins ( http://localhost:3434 ) . AllowAnyMethod () . AllowAnyHeader () . AllowCredentials ()) ); services . AddMvc (); ... } public void Configure ( IApplicationBuilder app , IHostingEnvironment env ) { ... // Add the following line before UseMvc app . UseCors ( AllowDevClient ); app . UseMvc ( routes = ... } Build and start Hosted server. Building your app The specified AfterBuild target will be executed by default whenever the project is built using: dotnet build on the command line Microsoft Visual Studio build command (\u2318K on VS Mac) Build hammer (\ud83d\udd28) if using JetBrains Rider Automatic builds using DotNet Watcher (see next) Tip You will have to enable AfterBuild in Rider. Setting DotNet Watcher to auto build your app Add the following watcher configuration to .csproj file (client side). If you use Bionic, you do not require this step as it is automatically added for you when you start your project with Bionic. ItemGroup Watch Include= **/*.cshtml;**/*.html;**/*.css Exclude= rootbeer/**/*.* Visible= false / /ItemGroup or, if in a Bionic app: ItemGroup Watch Include= **/*.cshtml;**/*.html;**/*.scss Visible= false / /ItemGroup Remove **/*.scss if you are not using SASS/SCSS to build your styles. In addition, update the following two entries in the same file: RunCommand echo /RunCommand RunArguments Reloading... /RunArguments Save and execute using: dotnet watch run On another terminal start Bionic Monitor with your preferences and now every-time a code change is detected, the project will be automatically built and reloaded. Bionic Monitor configuration You can configure Bionic Monitor through the command line options as displayed bellow. \u25cb \u2192 biomon --help \ud83e\udd16 Bionic Monitor - Live Reload for Blazor Bionic projects Usage: BionicMonitor [options] [command] Options: --bionic Use Bionic root directory .bionic/wwwroot (will not mess with files in wwwroot) --signalRProvided Enable if app already provides SignalR lib --hostOrIp Listening interface - defaults to localhost --port Serving port number - defaults to 5000 --securePort Serving secure port number - defaults to 5001 --destinationRootDir Destination root directory - defaults to wwwroot or .bionic/wwwroot with --bionic option enabled --sourceRootDir Source root directory - defaults to wwwroot -?|-h|--help Show help information Commands: docs Open Bionic Monitor documentation page in browser uninstall Initiate Bionic self-destruct sequence update Update Bionic Monitor to its latest incarnation version Print Bionic Monitor version number Run BionicMonitor [command] --help for more information about a command. Another option is to make use of Bionic Monitor configuration file. Bionic Monitor looks first for ./biomon.json and then for .bionic/biomon.json . Here's a sample config file with default values: { useBionic : false , isSignalRProvided : false , hostOrIp : localhost , port : 5000 , securePort : 5001 , destinationRootDir : wwwroot , sourceRootDir : wwwroot } Note that if using default values, then you can remove default entries from json file: { useBionic : true }","title":"Bionic Monitor"},{"location":"live-reload/#bionic-monitor","text":"Bionic Monitor provides live reloading capability to both Standalone and Hosted Blazor projects.","title":"Bionic Monitor"},{"location":"live-reload/#install-bionic-monitor","text":"dotnet tool install -g BionicMonitor","title":"Install Bionic Monitor"},{"location":"live-reload/#how-it-works","text":"By default, Bionic Monitor looks for changes in wwwroot and bin/Debug/netstandard2.0/dist and automatically reload the page when a change is detected. For this to happen, Bionic Monitor has to inject SignalR and respective handling functions. If your project already includes SignalR JS Client library then you can set Bionic Monitor to skip its injection (see --signalRProvided ). If you run Bionic Monitor without any further arguments in the client or standalone project: biomon Notice that wwwroot/index.html will be injected with the two JS source entries mentioned earlier. This is alright for a first test but suboptimal for development since source code should not be modified. Because of this, Bionic Monitor can be instructed to work from a replica of wwwroot. This can be done by specifying one of the following options: --bionic : Uses .bionic/wwwroot as destination root directory --destinationRootDir : Set a user specified destination root directory Check biomon --help for more details and options.","title":"How it works"},{"location":"live-reload/#standalone-project-setup","text":"Add the following to you .csproj file (client side): ItemGroup WwwRootFiles Include= wwwroot/**/*.* / /ItemGroup Target Name= CopyAssets AfterTargets= Build Message Importance= high Text= Copying.... / Copy SourceFiles= @(WwwRootFiles) DestinationFiles= .bionic/wwwroot/%(RecursiveDir)/%(Filename)%(Extension) SkipUnchangedFiles= false / /Target The above target will synchronize your destination root directory with the latest content changes in wwwroot directory. Notice that above example is using .bionic/wwwroot as its destination root directory. Replace it with your destination root directory. Finally, if you have kept .bionic/wwwroot then start Bionic Monitor using: biomon --bionic or, if you are using another destination root directory: biomon --destinationRootDirectory my/other/directory Once Bionic Monitor is running, the page will be automatically reloaded every-time you build your app.","title":"Standalone project setup"},{"location":"live-reload/#hosted-project-setup","text":"Hosted uses the same setup as Standalone and opens CORS on the Hosted Server. On the .Client project start Bionic Monitor on specific ports different than the one being used by the .Server : biomon --bionic --port 3434 --securePort 3535 Add the following to .Server Startup.cs file: public void ConfigureServices ( IServiceCollection services ) { ... // Add the following line before AddMvc services . AddCors ( options = options . AddPolicy ( AllowDevClient , builder = builder . WithOrigins ( http://localhost:3434 ) . AllowAnyMethod () . AllowAnyHeader () . AllowCredentials ()) ); services . AddMvc (); ... } public void Configure ( IApplicationBuilder app , IHostingEnvironment env ) { ... // Add the following line before UseMvc app . UseCors ( AllowDevClient ); app . UseMvc ( routes = ... } Build and start Hosted server.","title":"Hosted project setup"},{"location":"live-reload/#building-your-app","text":"The specified AfterBuild target will be executed by default whenever the project is built using: dotnet build on the command line Microsoft Visual Studio build command (\u2318K on VS Mac) Build hammer (\ud83d\udd28) if using JetBrains Rider Automatic builds using DotNet Watcher (see next) Tip You will have to enable AfterBuild in Rider.","title":"Building your app"},{"location":"live-reload/#setting-dotnet-watcher-to-auto-build-your-app","text":"Add the following watcher configuration to .csproj file (client side). If you use Bionic, you do not require this step as it is automatically added for you when you start your project with Bionic. ItemGroup Watch Include= **/*.cshtml;**/*.html;**/*.css Exclude= rootbeer/**/*.* Visible= false / /ItemGroup or, if in a Bionic app: ItemGroup Watch Include= **/*.cshtml;**/*.html;**/*.scss Visible= false / /ItemGroup Remove **/*.scss if you are not using SASS/SCSS to build your styles. In addition, update the following two entries in the same file: RunCommand echo /RunCommand RunArguments Reloading... /RunArguments Save and execute using: dotnet watch run On another terminal start Bionic Monitor with your preferences and now every-time a code change is detected, the project will be automatically built and reloaded.","title":"Setting DotNet Watcher to auto build your app"},{"location":"live-reload/#bionic-monitor-configuration","text":"You can configure Bionic Monitor through the command line options as displayed bellow. \u25cb \u2192 biomon --help \ud83e\udd16 Bionic Monitor - Live Reload for Blazor Bionic projects Usage: BionicMonitor [options] [command] Options: --bionic Use Bionic root directory .bionic/wwwroot (will not mess with files in wwwroot) --signalRProvided Enable if app already provides SignalR lib --hostOrIp Listening interface - defaults to localhost --port Serving port number - defaults to 5000 --securePort Serving secure port number - defaults to 5001 --destinationRootDir Destination root directory - defaults to wwwroot or .bionic/wwwroot with --bionic option enabled --sourceRootDir Source root directory - defaults to wwwroot -?|-h|--help Show help information Commands: docs Open Bionic Monitor documentation page in browser uninstall Initiate Bionic self-destruct sequence update Update Bionic Monitor to its latest incarnation version Print Bionic Monitor version number Run BionicMonitor [command] --help for more information about a command. Another option is to make use of Bionic Monitor configuration file. Bionic Monitor looks first for ./biomon.json and then for .bionic/biomon.json . Here's a sample config file with default values: { useBionic : false , isSignalRProvided : false , hostOrIp : localhost , port : 5000 , securePort : 5001 , destinationRootDir : wwwroot , sourceRootDir : wwwroot } Note that if using default values, then you can remove default entries from json file: { useBionic : true }","title":"Bionic Monitor configuration"},{"location":"platforms/electron/","text":"Electron Electron allows for the development of desktop GUI applications using front and back end components originally developed for web applications. The Bionic platform plugin uses a direct template provided by Electron and wraps it up for convenient development. Info Bionic will eventually provide another way of deploying Electron apps through Bionic Capacitor Plugin. Requirements NodeJS Capacitor depends on NodeJS. Please install or ensure that you are using a current NodeJS version: node --version v9.5.0 Prepare your Blazor app for Electron Ensure that index.html is explicitly defined Electron will fail to route to index.html if page is not explicitly defined. To fix this issue find your index.cshtml page and, if not present, add @page \"/index.html\" . The Blazor Standalone template Pages/index.cshtml should look this in order to make it work with Electron: @page / @page /index.html h1 Hello, world! / h1 Welcome to your new app. SurveyPrompt Title = How is Blazor working for you? / Ensure that the document base URL is set to look into the current directory Edit wwwroot/index.html and change base href=\"/\" / to be base href=\"./\" / . Initializing Electron First, we need to download and install Bionic's Electron Plugin. This step is only required once per project. From your project (or Blazor Client) directory do: bionic platform add electron \ud83d\udd0d Looking for electron platform plugin \u2615 Found it! Adding electron plugin... \ud83d\ude80 electron platform successfully added This will create the necessary assets under platforms/electron . The next step is to initialize Electron, and similarly, you only need to execute this step once: bionic platform electron init \u2615 Initializing Electron... ... \ud83d\ude80 Electron is ready to go! - try: bionic platform electron serve Building and Serving Electron The following steps are to be executed everytime you want to deploy the latest changes in Electron. First, rebuild your Blazor/Bionic project to ensure compiled assets are up-to-date: dotnet build Then prepare all assets in Electron platform directory: bionic platform electron build \u2615 Building Electron... \ud83d\ude80 Electron successfully built. Try: bionic platform electron serve Finally serve Electron: bionic platform electron serve \u2615 Serving Electron...","title":"Electron"},{"location":"platforms/electron/#electron","text":"Electron allows for the development of desktop GUI applications using front and back end components originally developed for web applications. The Bionic platform plugin uses a direct template provided by Electron and wraps it up for convenient development. Info Bionic will eventually provide another way of deploying Electron apps through Bionic Capacitor Plugin.","title":"Electron"},{"location":"platforms/electron/#requirements","text":"","title":"Requirements"},{"location":"platforms/electron/#nodejs","text":"Capacitor depends on NodeJS. Please install or ensure that you are using a current NodeJS version: node --version v9.5.0","title":"NodeJS"},{"location":"platforms/electron/#prepare-your-blazor-app-for-electron","text":"","title":"Prepare your Blazor app for Electron"},{"location":"platforms/electron/#ensure-that-indexhtml-is-explicitly-defined","text":"Electron will fail to route to index.html if page is not explicitly defined. To fix this issue find your index.cshtml page and, if not present, add @page \"/index.html\" . The Blazor Standalone template Pages/index.cshtml should look this in order to make it work with Electron: @page / @page /index.html h1 Hello, world! / h1 Welcome to your new app. SurveyPrompt Title = How is Blazor working for you? /","title":"Ensure that index.html is explicitly defined"},{"location":"platforms/electron/#ensure-that-the-document-base-url-is-set-to-look-into-the-current-directory","text":"Edit wwwroot/index.html and change base href=\"/\" / to be base href=\"./\" / .","title":"Ensure that the document base URL is set to look into the current directory"},{"location":"platforms/electron/#initializing-electron","text":"First, we need to download and install Bionic's Electron Plugin. This step is only required once per project. From your project (or Blazor Client) directory do: bionic platform add electron \ud83d\udd0d Looking for electron platform plugin \u2615 Found it! Adding electron plugin... \ud83d\ude80 electron platform successfully added This will create the necessary assets under platforms/electron . The next step is to initialize Electron, and similarly, you only need to execute this step once: bionic platform electron init \u2615 Initializing Electron... ... \ud83d\ude80 Electron is ready to go! - try: bionic platform electron serve","title":"Initializing Electron"},{"location":"platforms/electron/#building-and-serving-electron","text":"The following steps are to be executed everytime you want to deploy the latest changes in Electron. First, rebuild your Blazor/Bionic project to ensure compiled assets are up-to-date: dotnet build Then prepare all assets in Electron platform directory: bionic platform electron build \u2615 Building Electron... \ud83d\ude80 Electron successfully built. Try: bionic platform electron serve Finally serve Electron: bionic platform electron serve \u2615 Serving Electron...","title":"Building and Serving Electron"},{"location":"platforms/capacitor/0intro/","text":"Introduction Capacitor is a modern \"Native Progressive Web Apps\" platform. Through it, Bionic apps can currently be deployed in iOS and Android (Capacitor Web and Capacitor Electron coming soon). Requirements NodeJS Capacitor depends on NodeJS. Please install or ensure that you are using a current NodeJS version: node --version v9.5.0 Android Studio If you intend to target Android in this project, you will need to download and install Android Studio . iOS If you intend to target iOS (iPhone/iPad and whatever starts with i), you will need to have an Apple Mac and download and install XCode . Getting Started with Capacitor First, we need to download and install Bionic's Capacitor Plugin. This step is only required once per project. From your project (or Blazor Client) directory do: bionic platform add capacitor \ud83d\udd0d Looking for capacitor platform plugin \u2615 Found it! Adding capacitor plugin... \ud83d\ude80 capacitor platform successfully added This will create the necessary assets under platforms/capacitor . Next you need to initialize Capacitor. The process will ask for an App name and an App package ID. Please make sure the package ID follows the Java package naming convention : bionic platform capacitor init ... ? App name BionicApp ? App Package ID (must be a valid Java package) com.bionic.app \u2714 Initializing Capacitor project in ... Capacitor Targets Capacitor can deploy in 4 different targets: Android Electron (not available through Bionic yet) iOS Web (not available through Bionic yet)","title":"Introduction"},{"location":"platforms/capacitor/0intro/#introduction","text":"Capacitor is a modern \"Native Progressive Web Apps\" platform. Through it, Bionic apps can currently be deployed in iOS and Android (Capacitor Web and Capacitor Electron coming soon).","title":"Introduction"},{"location":"platforms/capacitor/0intro/#requirements","text":"","title":"Requirements"},{"location":"platforms/capacitor/0intro/#nodejs","text":"Capacitor depends on NodeJS. Please install or ensure that you are using a current NodeJS version: node --version v9.5.0","title":"NodeJS"},{"location":"platforms/capacitor/0intro/#android-studio","text":"If you intend to target Android in this project, you will need to download and install Android Studio .","title":"Android Studio"},{"location":"platforms/capacitor/0intro/#ios","text":"If you intend to target iOS (iPhone/iPad and whatever starts with i), you will need to have an Apple Mac and download and install XCode .","title":"iOS"},{"location":"platforms/capacitor/0intro/#getting-started-with-capacitor","text":"First, we need to download and install Bionic's Capacitor Plugin. This step is only required once per project. From your project (or Blazor Client) directory do: bionic platform add capacitor \ud83d\udd0d Looking for capacitor platform plugin \u2615 Found it! Adding capacitor plugin... \ud83d\ude80 capacitor platform successfully added This will create the necessary assets under platforms/capacitor . Next you need to initialize Capacitor. The process will ask for an App name and an App package ID. Please make sure the package ID follows the Java package naming convention : bionic platform capacitor init ... ? App name BionicApp ? App Package ID (must be a valid Java package) com.bionic.app \u2714 Initializing Capacitor project in ...","title":"Getting Started with Capacitor"},{"location":"platforms/capacitor/0intro/#capacitor-targets","text":"Capacitor can deploy in 4 different targets: Android Electron (not available through Bionic yet) iOS Web (not available through Bionic yet)","title":"Capacitor Targets"},{"location":"platforms/capacitor/android/","text":"Android Before you continue, please make sure you have installed and initialized Capacitor in Bionic and that Android Studio is installed. Initialize Capacitor Android This step is only required once and it will generate the necessary assets under platform/capacitor/android directory. bionic platform capacitor android init ... \ud83d\ude80 Capacitor Android is ready to go! - try: bionic platform capacitor android open Build and deploy Capacitor Android This step prepares Blazor assets for Capacitor Android deployment. bionic platform capacitor android build \u2615 Building Android Capacitor... \u2714 Copying web assets from www to android/app/src/main/assets/public in 42.83ms \u2714 Copying native bridge in 6.31ms \u2714 Copying capacitor.config.json in 1.55ms \u2714 copy in 58.91ms \ud83d\ude80 Capacitor successfully built. Try: bionic platform capacitor android open This step opens Android Studio with the project ready to go: bionic platform capacitor android open \u2615 Opening Android Capacitor project... [info] Opening Android project at ./platforms/capacitor/android Run the App in Emulator: Select Virtual Device. Make sure it has a recent Android API since WebAssembly is only available in recent APIs: And if everything went well, the app should be loaded in the provided device or emulator. Please remember that Capacitor is still in Beta and you may encounter some minor issues.","title":"Android"},{"location":"platforms/capacitor/android/#android","text":"Before you continue, please make sure you have installed and initialized Capacitor in Bionic and that Android Studio is installed.","title":"Android"},{"location":"platforms/capacitor/android/#initialize-capacitor-android","text":"This step is only required once and it will generate the necessary assets under platform/capacitor/android directory. bionic platform capacitor android init ... \ud83d\ude80 Capacitor Android is ready to go! - try: bionic platform capacitor android open","title":"Initialize Capacitor Android"},{"location":"platforms/capacitor/android/#build-and-deploy-capacitor-android","text":"This step prepares Blazor assets for Capacitor Android deployment. bionic platform capacitor android build \u2615 Building Android Capacitor... \u2714 Copying web assets from www to android/app/src/main/assets/public in 42.83ms \u2714 Copying native bridge in 6.31ms \u2714 Copying capacitor.config.json in 1.55ms \u2714 copy in 58.91ms \ud83d\ude80 Capacitor successfully built. Try: bionic platform capacitor android open This step opens Android Studio with the project ready to go: bionic platform capacitor android open \u2615 Opening Android Capacitor project... [info] Opening Android project at ./platforms/capacitor/android Run the App in Emulator: Select Virtual Device. Make sure it has a recent Android API since WebAssembly is only available in recent APIs: And if everything went well, the app should be loaded in the provided device or emulator. Please remember that Capacitor is still in Beta and you may encounter some minor issues.","title":"Build and deploy Capacitor Android"},{"location":"platforms/capacitor/ios/","text":"iOS Before you continue, please make sure you have installed and initialized Capacitor in Bionic and that Apple's XCode is installed. Initialize Capacitor iOS This step is only required once and it will generate the necessary assets under platform/capacitor/ios directory. bionic platform capacitor ios init ... \ud83d\ude80 Capacitor iOS is ready to go! - try: bionic platform capacitor ios open Build and deploy Capacitor iOS This step prepares Blazor assets for Capacitor iOS deployment. bionic platform capacitor ios build \u2615 Building iOS Capacitor... \u2714 Copying web assets from www to ios/App/public in 44.06ms \u2714 Copying native bridge in 6.15ms \u2714 Copying capacitor.config.json in 1.50ms \u2714 copy in 62.72ms \ud83d\ude80 Capacitor successfully built. Try: bionic platform capacitor ios open This step opens XCode with the project ready to go: bionic platform capacitor ios open \u2615 Opening iOS Capacitor project... \u2714 Opening the Xcode workspace... in 3.01s Select iOS target and run the App in Emulator or Device: And if everything went well, the app should be loaded in the provided device or emulator. Please remember that Capacitor is still in Beta and you may encounter some minor issues.","title":"iOS"},{"location":"platforms/capacitor/ios/#ios","text":"Before you continue, please make sure you have installed and initialized Capacitor in Bionic and that Apple's XCode is installed.","title":"iOS"},{"location":"platforms/capacitor/ios/#initialize-capacitor-ios","text":"This step is only required once and it will generate the necessary assets under platform/capacitor/ios directory. bionic platform capacitor ios init ... \ud83d\ude80 Capacitor iOS is ready to go! - try: bionic platform capacitor ios open","title":"Initialize Capacitor iOS"},{"location":"platforms/capacitor/ios/#build-and-deploy-capacitor-ios","text":"This step prepares Blazor assets for Capacitor iOS deployment. bionic platform capacitor ios build \u2615 Building iOS Capacitor... \u2714 Copying web assets from www to ios/App/public in 44.06ms \u2714 Copying native bridge in 6.15ms \u2714 Copying capacitor.config.json in 1.50ms \u2714 copy in 62.72ms \ud83d\ude80 Capacitor successfully built. Try: bionic platform capacitor ios open This step opens XCode with the project ready to go: bionic platform capacitor ios open \u2615 Opening iOS Capacitor project... \u2714 Opening the Xcode workspace... in 3.01s Select iOS target and run the App in Emulator or Device: And if everything went well, the app should be loaded in the provided device or emulator. Please remember that Capacitor is still in Beta and you may encounter some minor issues.","title":"Build and deploy Capacitor iOS"},{"location":"platforms/capacitor/bridge/0intro/","text":"Getting Started The Bionic Capacitor Bridge provides access to the device APIs through Capacitor. If you don't need any of the provided functionality, then you can just skip it. You can read more about Capacitor APIs here . Initialize Capacitor Bridge This step is only required once per project. bionic platform capacitor bridge init \u2615 Initializing Capacitor Bridge... ... \ud83d\ude80 Capacitor Bridge is ready to go!","title":"Getting Started"},{"location":"platforms/capacitor/bridge/0intro/#getting-started","text":"The Bionic Capacitor Bridge provides access to the device APIs through Capacitor. If you don't need any of the provided functionality, then you can just skip it. You can read more about Capacitor APIs here .","title":"Getting Started"},{"location":"platforms/capacitor/bridge/0intro/#initialize-capacitor-bridge","text":"This step is only required once per project. bionic platform capacitor bridge init \u2615 Initializing Capacitor Bridge... ... \ud83d\ude80 Capacitor Bridge is ready to go!","title":"Initialize Capacitor Bridge"},{"location":"platforms/capacitor/bridge/accessibility/","text":"iOS, Android The Accessibility API makes it easy to know when a user has a screen reader enabled, as well as programmatically speaking labels through the connected screen reader. Methods AccessibilityBridge.IsScreenReaderEnabled() AccessibilityBridge.Speak() AccessibilityBridge.AddListener() AccessibilityBridge.RemoveListener() Example private static async void AccessibilityIsScreenReaderEnabled () { try { var result = await AccessibilityBridge . IsScreenReaderEnabled (); } catch ( Exception e ) { // Handle error } } private static async void AccessibilitySpeak () { try { var options = new AccessibilitySpeakOptions { value = Hello! How are you? , language = en }; await AccessibilityBridge . Speak ( options ); } catch ( Exception e ) { // Handle error } } private string AccessibilityWatcherID ; private async Task AccessibilityListener () { if ( AccessibilityWatcherID == null ) { AccessibilityWatcherID = accessibility-listener ; try { await AccessibilityBridge . AddListener ( AccessibilityWatcherID , async ( result ) = { Console . WriteLine ( $ Received accessibility screen reader state change event {result} ); }); } catch ( Exception e ) { // Handle error } } else { try { await AccessibilityBridge . RemoveListener ( AccessibilityWatcherID ); AccessibilityWatcherID = null ; } catch ( Exception e ) { // Handle error } } } API IsScreenReaderEnabled Check if screen reader is enabled. static Task bool IsScreenReaderEnabled() Returns true if screen reader is enabled. False otherwise. Speak Speaks a provided string. static Task Speak( AccessibilitySpeakOptions options) AddListener Listen for screen reader state changes. static async Task AddListener(string id, Action bool callback) id: A unique string to be used as ID callback: A lambda function to be called everytime the screen reader state changes RemoveListener Remove listener with provided ID. static Task RemoveListener(string id) Models AccessibilitySpeakOptions public class AccessibilitySpeakOptions { public string value ; // The string to speak public string language ; // The language to speak as its [ISO 639-1 Code](https://www.loc.gov/standards/iso639-2/php/code_list.php) (ex: en ) }","title":"Accessibility"},{"location":"platforms/capacitor/bridge/accessibility/#methods","text":"AccessibilityBridge.IsScreenReaderEnabled() AccessibilityBridge.Speak() AccessibilityBridge.AddListener() AccessibilityBridge.RemoveListener()","title":"Methods"},{"location":"platforms/capacitor/bridge/accessibility/#example","text":"private static async void AccessibilityIsScreenReaderEnabled () { try { var result = await AccessibilityBridge . IsScreenReaderEnabled (); } catch ( Exception e ) { // Handle error } } private static async void AccessibilitySpeak () { try { var options = new AccessibilitySpeakOptions { value = Hello! How are you? , language = en }; await AccessibilityBridge . Speak ( options ); } catch ( Exception e ) { // Handle error } } private string AccessibilityWatcherID ; private async Task AccessibilityListener () { if ( AccessibilityWatcherID == null ) { AccessibilityWatcherID = accessibility-listener ; try { await AccessibilityBridge . AddListener ( AccessibilityWatcherID , async ( result ) = { Console . WriteLine ( $ Received accessibility screen reader state change event {result} ); }); } catch ( Exception e ) { // Handle error } } else { try { await AccessibilityBridge . RemoveListener ( AccessibilityWatcherID ); AccessibilityWatcherID = null ; } catch ( Exception e ) { // Handle error } } }","title":"Example"},{"location":"platforms/capacitor/bridge/accessibility/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/accessibility/#isscreenreaderenabled","text":"Check if screen reader is enabled. static Task bool IsScreenReaderEnabled() Returns true if screen reader is enabled. False otherwise.","title":"IsScreenReaderEnabled"},{"location":"platforms/capacitor/bridge/accessibility/#speak","text":"Speaks a provided string. static Task Speak( AccessibilitySpeakOptions options)","title":"Speak"},{"location":"platforms/capacitor/bridge/accessibility/#addlistener","text":"Listen for screen reader state changes. static async Task AddListener(string id, Action bool callback) id: A unique string to be used as ID callback: A lambda function to be called everytime the screen reader state changes","title":"AddListener"},{"location":"platforms/capacitor/bridge/accessibility/#removelistener","text":"Remove listener with provided ID. static Task RemoveListener(string id)","title":"RemoveListener"},{"location":"platforms/capacitor/bridge/accessibility/#models","text":"","title":"Models"},{"location":"platforms/capacitor/bridge/accessibility/#accessibilityspeakoptions","text":"public class AccessibilitySpeakOptions { public string value ; // The string to speak public string language ; // The language to speak as its [ISO 639-1 Code](https://www.loc.gov/standards/iso639-2/php/code_list.php) (ex: en ) }","title":"AccessibilitySpeakOptions"},{"location":"platforms/capacitor/bridge/app/","text":"App iOS, Android, Electron, PWA The App API handles high level App state and events. For example, this API emits events when the app enters and leaves the foreground, handles deeplinks, opens other apps, and manages persisted plugin state. Methods AppBridge.CanOpenUrl() AppBridge.ExitApp() AppBridge.GetLaunchUrl() AppBridge.OpenUrl() AppBridge.AddAppStateChangeListener() AppBridge.AddAppUrlOpenListener() AppBridge.AddAppRestoredResultListener() AppBridge.AddAppBackButtonListener() AppBridge.RemoveListener() Example private string AppStateChangeWatcherID ; private async Task AppStateChange () { if ( AppStateChangeWatcherID == null ) { AppStateChangeWatcherID = app-state-change-listener ; try { await AppBridge . AddAppStateChangeListener ( AppStateChangeWatcherID , async ( result ) = { Console . WriteLine ( $ Received new state change event {result.isActive} ); }); } catch ( Exception e ) { // Handle error } } else { try { await AppBridge . RemoveListener ( AppStateChangeWatcherID ); AppStateChangeWatcherID = null ; } catch ( Exception e ) { // Handle error } } } private string AppUrlOpenWatcherID ; private async Task AppUrlOpen () { if ( AppUrlOpenWatcherID == null ) { AppUrlOpenWatcherID = app-url-open-listener ; try { await AppBridge . AddAppUrlOpenListener ( AppUrlOpenWatcherID , async ( result ) = { Console . WriteLine ( $ Received new url open event {result.url} ); }); } catch ( Exception e ) { // Handle error } } else { try { await AppBridge . RemoveListener ( AppUrlOpenWatcherID ); AppUrlOpenWatcherID = null ; } catch ( Exception e ) { // Handle error } } } private string AppRestoredResultWatcherID ; private async Task AppRestoredResult () { if ( AppRestoredResultWatcherID == null ) { AppRestoredResultWatcherID = app-restored-result-listener ; try { await AppBridge . AddAppRestoredResultListener ( AppRestoredResultWatcherID , async ( result ) = { Console . WriteLine ( $ Received new restored result event {result.methodName} ); }); } catch ( Exception e ) { // Handle error } } else { try { await AppBridge . RemoveListener ( AppRestoredResultWatcherID ); AppRestoredResultWatcherID = null ; } catch ( Exception e ) { // Handle error } } } private string AppBackButtonWatcherID ; private async Task AppBackButton () { if ( AppBackButtonWatcherID == null ) { AppBackButtonWatcherID = app-back-button-listener ; try { await AppBridge . AddAppBackButtonListener ( AppBackButtonWatcherID , async ( result ) = { Console . WriteLine ( $ Received new back button event {result.url} ); }); } catch ( Exception e ) { // Handle error } } else { try { await AppBridge . RemoveListener ( AppBackButtonWatcherID ); AppBackButtonWatcherID = null ; } catch ( Exception e ) { // Handle error } } } private static async void AppExit () { try { await AppBridge . ExitApp (); } catch ( Exception e ) { // Handle error } } private static async void AppCanOpenUrl () { try { var result = await AppBridge . CanOpenUrl ( bionic.bridge.capacitor ); Console . WriteLine ( $ Can Open Url: {result} ); } catch ( Exception e ) { // Handle error } } private static async void AppOpenUrl () { try { var result = await AppBridge . OpenUrl ( bionic.bridge.capacitor:// ); Console . WriteLine ( $ Open Url: {result} ); } catch ( Exception e ) { // Handle error } } private static async void AppGetLaunchUrl () { try { var result = await AppBridge . GetLaunchUrl (); Console . WriteLine ( $ Get Launch Url: {result} ); } catch ( Exception e ) { // Handle error } } API CanOpenUrl Check if passed url can be opened. static Task bool CanOpenUrl(string url) ExitApp Close and exit application. static Task ExitApp() GetLaunchUrl Get launch url. static Task string GetLaunchUrl() Returns the app launch url. OpenUrl Open the provided app page. static Task bool OpenUrl(string url) AddAppStateChangeListener Listen for changes in the App's active state (whether the app is in the foreground or background) static async Task AddAppStateChangeListener(string id, Action AppState callback) id: A unique string to be used as ID callback: A lambda function to be called everytime there are updates AddAppUrlOpenListener Listen for url open events for the app. This handles both custom URL scheme links as well as URLs your app handles (Universal Links on iOS and App Links on Android) static async Task AddAppUrlOpenListener(string id, Action AppUrlOpen callback) id: A unique string to be used as ID callback: A lambda function to be called everytime there are updates AddAppRestoredResultListener If the app was launched with previously persisted plugin call data, such as on Android when an activity returns to an app that was closed, this call will return any data the app was launched with, converted into the form of a result from a plugin call. static async Task AddAppRestoredResultListener(string id, Action AppRestoredResult callback) { id: A unique string to be used as ID callback: A lambda function to be called everytime there are updates AddAppBackButtonListener Listen for the hardware back button event (Android only). If you want to close the app, call App.exitApp() static async Task AddAppBackButtonListener(string id, Action AppUrlOpen callback) { id: A unique string to be used as ID callback: A lambda function to be called everytime there are updates RemoveListener Remove listener with provided ID. static Task RemoveListener(string id) { Models AppState public class AppState { public bool isActive ; // Is app active (in foreground) } AppUrlOpen public class AppUrlOpen { public string url ; // The URL the app was opened with public object iosSourceApplication ; // [The URL the app was opened with public bool iosOpenInPlace ; // Whether the app should open the passed document in-place or must copy it first. } AppRestoredResult public class AppRestoredResult { public string pluginId ; // The pluginId this result corresponds to. For example, `Camera`. public string methodName ; // The methodName this result corresponds to. For example, `getPhoto` public string data ; // The result data passed from the plugin. This would be the result you d expect from normally calling the plugin method. For example, `CameraPhoto` }","title":"App"},{"location":"platforms/capacitor/bridge/app/#app","text":"iOS, Android, Electron, PWA The App API handles high level App state and events. For example, this API emits events when the app enters and leaves the foreground, handles deeplinks, opens other apps, and manages persisted plugin state.","title":"App"},{"location":"platforms/capacitor/bridge/app/#methods","text":"AppBridge.CanOpenUrl() AppBridge.ExitApp() AppBridge.GetLaunchUrl() AppBridge.OpenUrl() AppBridge.AddAppStateChangeListener() AppBridge.AddAppUrlOpenListener() AppBridge.AddAppRestoredResultListener() AppBridge.AddAppBackButtonListener() AppBridge.RemoveListener()","title":"Methods"},{"location":"platforms/capacitor/bridge/app/#example","text":"private string AppStateChangeWatcherID ; private async Task AppStateChange () { if ( AppStateChangeWatcherID == null ) { AppStateChangeWatcherID = app-state-change-listener ; try { await AppBridge . AddAppStateChangeListener ( AppStateChangeWatcherID , async ( result ) = { Console . WriteLine ( $ Received new state change event {result.isActive} ); }); } catch ( Exception e ) { // Handle error } } else { try { await AppBridge . RemoveListener ( AppStateChangeWatcherID ); AppStateChangeWatcherID = null ; } catch ( Exception e ) { // Handle error } } } private string AppUrlOpenWatcherID ; private async Task AppUrlOpen () { if ( AppUrlOpenWatcherID == null ) { AppUrlOpenWatcherID = app-url-open-listener ; try { await AppBridge . AddAppUrlOpenListener ( AppUrlOpenWatcherID , async ( result ) = { Console . WriteLine ( $ Received new url open event {result.url} ); }); } catch ( Exception e ) { // Handle error } } else { try { await AppBridge . RemoveListener ( AppUrlOpenWatcherID ); AppUrlOpenWatcherID = null ; } catch ( Exception e ) { // Handle error } } } private string AppRestoredResultWatcherID ; private async Task AppRestoredResult () { if ( AppRestoredResultWatcherID == null ) { AppRestoredResultWatcherID = app-restored-result-listener ; try { await AppBridge . AddAppRestoredResultListener ( AppRestoredResultWatcherID , async ( result ) = { Console . WriteLine ( $ Received new restored result event {result.methodName} ); }); } catch ( Exception e ) { // Handle error } } else { try { await AppBridge . RemoveListener ( AppRestoredResultWatcherID ); AppRestoredResultWatcherID = null ; } catch ( Exception e ) { // Handle error } } } private string AppBackButtonWatcherID ; private async Task AppBackButton () { if ( AppBackButtonWatcherID == null ) { AppBackButtonWatcherID = app-back-button-listener ; try { await AppBridge . AddAppBackButtonListener ( AppBackButtonWatcherID , async ( result ) = { Console . WriteLine ( $ Received new back button event {result.url} ); }); } catch ( Exception e ) { // Handle error } } else { try { await AppBridge . RemoveListener ( AppBackButtonWatcherID ); AppBackButtonWatcherID = null ; } catch ( Exception e ) { // Handle error } } } private static async void AppExit () { try { await AppBridge . ExitApp (); } catch ( Exception e ) { // Handle error } } private static async void AppCanOpenUrl () { try { var result = await AppBridge . CanOpenUrl ( bionic.bridge.capacitor ); Console . WriteLine ( $ Can Open Url: {result} ); } catch ( Exception e ) { // Handle error } } private static async void AppOpenUrl () { try { var result = await AppBridge . OpenUrl ( bionic.bridge.capacitor:// ); Console . WriteLine ( $ Open Url: {result} ); } catch ( Exception e ) { // Handle error } } private static async void AppGetLaunchUrl () { try { var result = await AppBridge . GetLaunchUrl (); Console . WriteLine ( $ Get Launch Url: {result} ); } catch ( Exception e ) { // Handle error } }","title":"Example"},{"location":"platforms/capacitor/bridge/app/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/app/#canopenurl","text":"Check if passed url can be opened. static Task bool CanOpenUrl(string url)","title":"CanOpenUrl"},{"location":"platforms/capacitor/bridge/app/#exitapp","text":"Close and exit application. static Task ExitApp()","title":"ExitApp"},{"location":"platforms/capacitor/bridge/app/#getlaunchurl","text":"Get launch url. static Task string GetLaunchUrl() Returns the app launch url.","title":"GetLaunchUrl"},{"location":"platforms/capacitor/bridge/app/#openurl","text":"Open the provided app page. static Task bool OpenUrl(string url)","title":"OpenUrl"},{"location":"platforms/capacitor/bridge/app/#addappstatechangelistener","text":"Listen for changes in the App's active state (whether the app is in the foreground or background) static async Task AddAppStateChangeListener(string id, Action AppState callback) id: A unique string to be used as ID callback: A lambda function to be called everytime there are updates","title":"AddAppStateChangeListener"},{"location":"platforms/capacitor/bridge/app/#addappurlopenlistener","text":"Listen for url open events for the app. This handles both custom URL scheme links as well as URLs your app handles (Universal Links on iOS and App Links on Android) static async Task AddAppUrlOpenListener(string id, Action AppUrlOpen callback) id: A unique string to be used as ID callback: A lambda function to be called everytime there are updates","title":"AddAppUrlOpenListener"},{"location":"platforms/capacitor/bridge/app/#addapprestoredresultlistener","text":"If the app was launched with previously persisted plugin call data, such as on Android when an activity returns to an app that was closed, this call will return any data the app was launched with, converted into the form of a result from a plugin call. static async Task AddAppRestoredResultListener(string id, Action AppRestoredResult callback) { id: A unique string to be used as ID callback: A lambda function to be called everytime there are updates","title":"AddAppRestoredResultListener"},{"location":"platforms/capacitor/bridge/app/#addappbackbuttonlistener","text":"Listen for the hardware back button event (Android only). If you want to close the app, call App.exitApp() static async Task AddAppBackButtonListener(string id, Action AppUrlOpen callback) { id: A unique string to be used as ID callback: A lambda function to be called everytime there are updates","title":"AddAppBackButtonListener"},{"location":"platforms/capacitor/bridge/app/#removelistener","text":"Remove listener with provided ID. static Task RemoveListener(string id) {","title":"RemoveListener"},{"location":"platforms/capacitor/bridge/app/#models","text":"","title":"Models"},{"location":"platforms/capacitor/bridge/app/#appstate","text":"public class AppState { public bool isActive ; // Is app active (in foreground) }","title":"AppState"},{"location":"platforms/capacitor/bridge/app/#appurlopen","text":"public class AppUrlOpen { public string url ; // The URL the app was opened with public object iosSourceApplication ; // [The URL the app was opened with public bool iosOpenInPlace ; // Whether the app should open the passed document in-place or must copy it first. }","title":"AppUrlOpen"},{"location":"platforms/capacitor/bridge/app/#apprestoredresult","text":"public class AppRestoredResult { public string pluginId ; // The pluginId this result corresponds to. For example, `Camera`. public string methodName ; // The methodName this result corresponds to. For example, `getPhoto` public string data ; // The result data passed from the plugin. This would be the result you d expect from normally calling the plugin method. For example, `CameraPhoto` }","title":"AppRestoredResult"},{"location":"platforms/capacitor/bridge/background_task/","text":"Background Tasks iOS, Android The Background Task API makes it easy to run background tasks. Currently, this plugin supports running a task when the app is backgrounded, and soon will support periodic background fetch operations. Methods BackgroundTaskBridge.BeforeExit() BackgroundTaskBridge.Finish() Example private static async void BackgroundTask () { string id = null ; try { id = await BackgroundTaskBridge . BeforeExit ( async () = { Console . WriteLine ( $ Cleaning house before exiting... ); await BackgroundTaskBridge . Finish ( id ); }); } catch ( Exception e ) { // Handle error } } API BeforeExit When the app is backgrounded, this method allows you to run a short-lived background task that will ensure that you can finish any work your app needs to do (such as finishing an upload or network request). This is especially important on iOS as any operations would normally be suspended without initiating a background task. This method should finish in less than 3 minutes or your app risks being terminated by the OS. When you are finished, this callback must call BackgroundTaskBridge.Finish(id) where taskId is the value returned from BackgroundTask.beforeExit() . static async Task string BeforeExit(Action callback) callback: The task to run when the app is backgrounded but before it is terminated Finish Notify the OS that the given task is finished and the OS can continue backgrounding the app. static async Task Finish(string id)","title":"Background Tasks"},{"location":"platforms/capacitor/bridge/background_task/#background-tasks","text":"iOS, Android The Background Task API makes it easy to run background tasks. Currently, this plugin supports running a task when the app is backgrounded, and soon will support periodic background fetch operations.","title":"Background Tasks"},{"location":"platforms/capacitor/bridge/background_task/#methods","text":"BackgroundTaskBridge.BeforeExit() BackgroundTaskBridge.Finish()","title":"Methods"},{"location":"platforms/capacitor/bridge/background_task/#example","text":"private static async void BackgroundTask () { string id = null ; try { id = await BackgroundTaskBridge . BeforeExit ( async () = { Console . WriteLine ( $ Cleaning house before exiting... ); await BackgroundTaskBridge . Finish ( id ); }); } catch ( Exception e ) { // Handle error } }","title":"Example"},{"location":"platforms/capacitor/bridge/background_task/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/background_task/#beforeexit","text":"When the app is backgrounded, this method allows you to run a short-lived background task that will ensure that you can finish any work your app needs to do (such as finishing an upload or network request). This is especially important on iOS as any operations would normally be suspended without initiating a background task. This method should finish in less than 3 minutes or your app risks being terminated by the OS. When you are finished, this callback must call BackgroundTaskBridge.Finish(id) where taskId is the value returned from BackgroundTask.beforeExit() . static async Task string BeforeExit(Action callback) callback: The task to run when the app is backgrounded but before it is terminated","title":"BeforeExit"},{"location":"platforms/capacitor/bridge/background_task/#finish","text":"Notify the OS that the given task is finished and the OS can continue backgrounding the app. static async Task Finish(string id)","title":"Finish"},{"location":"platforms/capacitor/bridge/browser/","text":"Browser iOS, Android, Electron, PWA The Browser API makes it easy to open an in-app browser session to show external web content, handle authentication flows, and more. On iOS this uses SFSafariViewController and is compliant with leading oAuth service in-app-browser requirements. Methods BrowserBridge.Close() BrowserBridge.Open() BrowserBridge.Prefetch() BrowserBridge.ListenToBrowserFinished() BrowserBridge.ListenToBrowserPageLoaded() Example private static void BrowserOpen ( string ps , string url = https://blazor.net ) { try { var options = new BrowserOpenOptions { url = url , presentationStyle = ps , windowName = Bionic Browser , toolbarColor = red }; BrowserBridge . Open ( options ); } catch ( Exception e ) { // Handle error } } private static void BrowserPrefetch () { try { var options = new BrowserPrefetchOptions { urls = new [] { https://marcelooliveira.github.io/ } }; BrowserBridge . Prefetch ( options ); } catch ( Exception e ) { // Handle error } } private static bool IsListeningToBrowserFinished ; private static async void BrowserFinished () { try { if ( IsListeningToBrowserFinished ) { // Unregister ... } else { await BrowserBridge . ListenToBrowserFinished ( test-browser-finished , ( id , info ) = Console . WriteLine ( $ Received BrowserFinished event for {id}: {info} )); IsListeningToBrowserFinished = true ; } } catch ( Exception e ) { // Handle error } } private static bool IsListeningToBrowserPageLoaded ; private static async void BrowserPageLoaded () { try { if ( IsListeningToBrowserPageLoaded ) { // Unregister ... } else { await BrowserBridge . ListenToBrowserPageLoaded ( test-browser-pageloaded , ( id , info ) = Console . WriteLine ( $ Received BrowserPageLoaded event for {id}: {info} )); IsListeningToBrowserPageLoaded = true ; } } catch ( Exception e ) { // Handle error } } API Close Close an open browser. Only works on iOS, otherwise is a no-op static Task Close() Open Open a page with the given URL static Task Open(BrowserOpenOptions options) Prefetch Hint to the browser that the given URLs will be accessed to improve initial loading times. Only functional on Android, is a no-op on iOS static Task Prefetch(BrowserPrefetchOptions options) ListenToBrowserFinished Listen to browser finished events static async Task ListenToBrowserFinished(string id, Action string, string callback) ListenToBrowserPageLoaded Listen to browser page loaded events static async Task ListenToBrowserPageLoaded(string id, Action string, string callback) Models BrowserOpenOptions public class BrowserOpenOptions { public string url ; // The URL to open the browser to public string windowName ; // Web only: Optional target for browser open. Follows the `target` property for window.open. Defaults to _blank public string toolbarColor ; // A hex color to set the toolbar color to. public string presentationStyle ; // iOS only: The presentation style of the browser. Defaults to fullscreen. } BrowserPrefetchOptions public class BrowserPrefetchOptions { public string [] urls ; // List of url to prefetch }","title":"Browser"},{"location":"platforms/capacitor/bridge/browser/#browser","text":"iOS, Android, Electron, PWA The Browser API makes it easy to open an in-app browser session to show external web content, handle authentication flows, and more. On iOS this uses SFSafariViewController and is compliant with leading oAuth service in-app-browser requirements.","title":"Browser"},{"location":"platforms/capacitor/bridge/browser/#methods","text":"BrowserBridge.Close() BrowserBridge.Open() BrowserBridge.Prefetch() BrowserBridge.ListenToBrowserFinished() BrowserBridge.ListenToBrowserPageLoaded()","title":"Methods"},{"location":"platforms/capacitor/bridge/browser/#example","text":"private static void BrowserOpen ( string ps , string url = https://blazor.net ) { try { var options = new BrowserOpenOptions { url = url , presentationStyle = ps , windowName = Bionic Browser , toolbarColor = red }; BrowserBridge . Open ( options ); } catch ( Exception e ) { // Handle error } } private static void BrowserPrefetch () { try { var options = new BrowserPrefetchOptions { urls = new [] { https://marcelooliveira.github.io/ } }; BrowserBridge . Prefetch ( options ); } catch ( Exception e ) { // Handle error } } private static bool IsListeningToBrowserFinished ; private static async void BrowserFinished () { try { if ( IsListeningToBrowserFinished ) { // Unregister ... } else { await BrowserBridge . ListenToBrowserFinished ( test-browser-finished , ( id , info ) = Console . WriteLine ( $ Received BrowserFinished event for {id}: {info} )); IsListeningToBrowserFinished = true ; } } catch ( Exception e ) { // Handle error } } private static bool IsListeningToBrowserPageLoaded ; private static async void BrowserPageLoaded () { try { if ( IsListeningToBrowserPageLoaded ) { // Unregister ... } else { await BrowserBridge . ListenToBrowserPageLoaded ( test-browser-pageloaded , ( id , info ) = Console . WriteLine ( $ Received BrowserPageLoaded event for {id}: {info} )); IsListeningToBrowserPageLoaded = true ; } } catch ( Exception e ) { // Handle error } }","title":"Example"},{"location":"platforms/capacitor/bridge/browser/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/browser/#close","text":"Close an open browser. Only works on iOS, otherwise is a no-op static Task Close()","title":"Close"},{"location":"platforms/capacitor/bridge/browser/#open","text":"Open a page with the given URL static Task Open(BrowserOpenOptions options)","title":"Open"},{"location":"platforms/capacitor/bridge/browser/#prefetch","text":"Hint to the browser that the given URLs will be accessed to improve initial loading times. Only functional on Android, is a no-op on iOS static Task Prefetch(BrowserPrefetchOptions options)","title":"Prefetch"},{"location":"platforms/capacitor/bridge/browser/#listentobrowserfinished","text":"Listen to browser finished events static async Task ListenToBrowserFinished(string id, Action string, string callback)","title":"ListenToBrowserFinished"},{"location":"platforms/capacitor/bridge/browser/#listentobrowserpageloaded","text":"Listen to browser page loaded events static async Task ListenToBrowserPageLoaded(string id, Action string, string callback)","title":"ListenToBrowserPageLoaded"},{"location":"platforms/capacitor/bridge/browser/#models","text":"","title":"Models"},{"location":"platforms/capacitor/bridge/browser/#browseropenoptions","text":"public class BrowserOpenOptions { public string url ; // The URL to open the browser to public string windowName ; // Web only: Optional target for browser open. Follows the `target` property for window.open. Defaults to _blank public string toolbarColor ; // A hex color to set the toolbar color to. public string presentationStyle ; // iOS only: The presentation style of the browser. Defaults to fullscreen. }","title":"BrowserOpenOptions"},{"location":"platforms/capacitor/bridge/browser/#browserprefetchoptions","text":"public class BrowserPrefetchOptions { public string [] urls ; // List of url to prefetch }","title":"BrowserPrefetchOptions"},{"location":"platforms/capacitor/bridge/camera/","text":"Camera iOS, Android, Electron, PWA The Camera API allows a user to pick a photo from their photo album or take a picture. On iOS, this uses UIImagePickerController, and on Android this API sends an intent which will be handled by the core Camera app by default. Methods CameraBridge.GetPhoto() Example string ImageSrc ; private async Task Camera () { var options = new CameraOptions { quality = 90 , allowEditing = true , resultType = CameraResultType . Uri }; try { var image = await CameraBridge . GetPhoto ( options ); ImageSrc = image . webPath ; } catch ( Exception e ) { // Handle error } } API GetPhoto Prompt the user to pick a photo from an album, or take a new photo with the camera. static Task CameraPhoto GetPhoto( CameraOptions options) Models CameraOptions public class CameraOptions { public int quality ; // The quality of image to return as JPEG, from 0-100 public bool allowEditing ; // Whether to allow the user to crop or make small edits (platform specific) public CameraResultType resultType ; // How the data should be returned. Currently, only base64 or uri is supported public bool saveToGallery ; // Whether to save the photo to the gallery/photostream public int width ; // The width of the saved image public int height ; // The height of the saved image public bool correctOrientation ; // Whether to automatically rotate the image up to correct for orientation in portrait mode. Default: true public CameraSource source ; // The source to get the photo from. By default this prompts the user to select either the photo album or take a photo. Default: CameraSource.Prompt } public enum CameraResultType { Uri , Base64 } public enum CameraSource { Prompt , Camera , Photos , }","title":"Camera"},{"location":"platforms/capacitor/bridge/camera/#camera","text":"iOS, Android, Electron, PWA The Camera API allows a user to pick a photo from their photo album or take a picture. On iOS, this uses UIImagePickerController, and on Android this API sends an intent which will be handled by the core Camera app by default.","title":"Camera"},{"location":"platforms/capacitor/bridge/camera/#methods","text":"CameraBridge.GetPhoto()","title":"Methods"},{"location":"platforms/capacitor/bridge/camera/#example","text":"string ImageSrc ; private async Task Camera () { var options = new CameraOptions { quality = 90 , allowEditing = true , resultType = CameraResultType . Uri }; try { var image = await CameraBridge . GetPhoto ( options ); ImageSrc = image . webPath ; } catch ( Exception e ) { // Handle error } }","title":"Example"},{"location":"platforms/capacitor/bridge/camera/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/camera/#getphoto","text":"Prompt the user to pick a photo from an album, or take a new photo with the camera. static Task CameraPhoto GetPhoto( CameraOptions options)","title":"GetPhoto"},{"location":"platforms/capacitor/bridge/camera/#models","text":"","title":"Models"},{"location":"platforms/capacitor/bridge/camera/#cameraoptions","text":"public class CameraOptions { public int quality ; // The quality of image to return as JPEG, from 0-100 public bool allowEditing ; // Whether to allow the user to crop or make small edits (platform specific) public CameraResultType resultType ; // How the data should be returned. Currently, only base64 or uri is supported public bool saveToGallery ; // Whether to save the photo to the gallery/photostream public int width ; // The width of the saved image public int height ; // The height of the saved image public bool correctOrientation ; // Whether to automatically rotate the image up to correct for orientation in portrait mode. Default: true public CameraSource source ; // The source to get the photo from. By default this prompts the user to select either the photo album or take a photo. Default: CameraSource.Prompt } public enum CameraResultType { Uri , Base64 } public enum CameraSource { Prompt , Camera , Photos , }","title":"CameraOptions"},{"location":"platforms/capacitor/bridge/clipboard/","text":"Clipboard iOS, Android, Electron, PWA The Clipboard API enables copy and pasting to/from the clipboard. On iOS this API also allows copying images and URLs. Methods ClipboardBridge.Read() ClipboardBridge.Write() Example private static async void ClipboardWrite () { try { var data = new ClipboardWrite { str = Clipboard Data String }; await ClipboardBridge . Write ( data ); } catch ( Exception e ) { // Handle error } } private static async void ClipboardRead () { try { var obj = await ClipboardBridge . Read ( ClipboardReadType . String ); Console . WriteLine ( $ Data from Clipboard: {obj.value} ); } catch ( Exception e ) { // Handle error } } API Read Read a value from the clipboard (the \"paste\" action) static Task ClipboardReadResult Read( ClipboardReadType clipboardReadType) Write Write a value to the clipboard (the \"copy\" action) static Task Write( ClipboardWrite clipboardWrite) Models ClipboardReadType public enum ClipboardReadType { String , Url , Image } ClipboardReadResult public class ClipboardReadResult { public string value ; // Clipboard data } ClipboardWrite public class ClipboardWrite { public string str ; // String to write to clipboard public string image ; // Image to write to clipboard public string url ; // URL to write to clipboard public string label ; }","title":"Clipboard"},{"location":"platforms/capacitor/bridge/clipboard/#clipboard","text":"iOS, Android, Electron, PWA The Clipboard API enables copy and pasting to/from the clipboard. On iOS this API also allows copying images and URLs.","title":"Clipboard"},{"location":"platforms/capacitor/bridge/clipboard/#methods","text":"ClipboardBridge.Read() ClipboardBridge.Write()","title":"Methods"},{"location":"platforms/capacitor/bridge/clipboard/#example","text":"private static async void ClipboardWrite () { try { var data = new ClipboardWrite { str = Clipboard Data String }; await ClipboardBridge . Write ( data ); } catch ( Exception e ) { // Handle error } } private static async void ClipboardRead () { try { var obj = await ClipboardBridge . Read ( ClipboardReadType . String ); Console . WriteLine ( $ Data from Clipboard: {obj.value} ); } catch ( Exception e ) { // Handle error } }","title":"Example"},{"location":"platforms/capacitor/bridge/clipboard/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/clipboard/#read","text":"Read a value from the clipboard (the \"paste\" action) static Task ClipboardReadResult Read( ClipboardReadType clipboardReadType)","title":"Read"},{"location":"platforms/capacitor/bridge/clipboard/#write","text":"Write a value to the clipboard (the \"copy\" action) static Task Write( ClipboardWrite clipboardWrite)","title":"Write"},{"location":"platforms/capacitor/bridge/clipboard/#models","text":"","title":"Models"},{"location":"platforms/capacitor/bridge/clipboard/#clipboardreadtype","text":"public enum ClipboardReadType { String , Url , Image }","title":"ClipboardReadType"},{"location":"platforms/capacitor/bridge/clipboard/#clipboardreadresult","text":"public class ClipboardReadResult { public string value ; // Clipboard data }","title":"ClipboardReadResult"},{"location":"platforms/capacitor/bridge/clipboard/#clipboardwrite","text":"public class ClipboardWrite { public string str ; // String to write to clipboard public string image ; // Image to write to clipboard public string url ; // URL to write to clipboard public string label ; }","title":"ClipboardWrite"},{"location":"platforms/capacitor/bridge/console/","text":"Console iOS, Android, Electron, PWA The Console API automatically sends console.log calls to the native log system on each respective platform. This enables, for example, console.log calls to be rendered in the Xcode and Android Studio log windows. Methods ConsoleBridge.Log() Example ConsoleBridge . Log ( A log from \ud83d\udd25 Blazor \ud83d\udd25 ); API Log Log string to device console. static Task Log(string message)","title":"Console"},{"location":"platforms/capacitor/bridge/console/#console","text":"iOS, Android, Electron, PWA The Console API automatically sends console.log calls to the native log system on each respective platform. This enables, for example, console.log calls to be rendered in the Xcode and Android Studio log windows.","title":"Console"},{"location":"platforms/capacitor/bridge/console/#methods","text":"ConsoleBridge.Log()","title":"Methods"},{"location":"platforms/capacitor/bridge/console/#example","text":"ConsoleBridge . Log ( A log from \ud83d\udd25 Blazor \ud83d\udd25 );","title":"Example"},{"location":"platforms/capacitor/bridge/console/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/console/#log","text":"Log string to device console. static Task Log(string message)","title":"Log"},{"location":"platforms/capacitor/bridge/device/","text":"Device iOS, Android, Electron, PWA The Device API exposes internal information about the device, such as the model and operating system version, along with user information such as unique ids. Methods DeviceBridge.GetInfo() Example DeviceInfo DeviceData ; private async Task Device () { try { DeviceData = await DeviceBridge . GetInfo (); } catch ( Exception e ) { // Handle error } } API GetInfo Return information about the underlying device/os/platform static Task DeviceInfo GetInfo() Models DeviceInfo public class DeviceInfo { public string model ; // The device model. For example, iPhone public string platform ; // The device platform (lowercase). For example, ios , android , or web public string uuid ; // The UUID of the device as available to the app. This identifier may change on modern mobile platforms that only allow per-app install UUIDs. public string appVersion ; // The current bundle version of the app public string osVersion ; // The version of the device OS public string manufacturer ; // The manufacturer of the device public bool isVirtual ; // Whether the app is running in a simulator/emulator public long memUsed ; // Approximate memory used by the current app, in bytes. Divide by 1048576 to get the number of MBs used. public long diskFree ; // Approximate memory used by the current app, in bytes. Divide by 1048576 to get the number of MBs used. public long diskTotal ; // Approximate memory used by the current app, in bytes. Divide by 1048576 to get the number of MBs used. public long batteryLevel ; // A percentage (0 to 1) indicating how much the battery is charged public bool isCharging ; // Whether the device is charging }","title":"Device"},{"location":"platforms/capacitor/bridge/device/#device","text":"iOS, Android, Electron, PWA The Device API exposes internal information about the device, such as the model and operating system version, along with user information such as unique ids.","title":"Device"},{"location":"platforms/capacitor/bridge/device/#methods","text":"DeviceBridge.GetInfo()","title":"Methods"},{"location":"platforms/capacitor/bridge/device/#example","text":"DeviceInfo DeviceData ; private async Task Device () { try { DeviceData = await DeviceBridge . GetInfo (); } catch ( Exception e ) { // Handle error } }","title":"Example"},{"location":"platforms/capacitor/bridge/device/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/device/#getinfo","text":"Return information about the underlying device/os/platform static Task DeviceInfo GetInfo()","title":"GetInfo"},{"location":"platforms/capacitor/bridge/device/#models","text":"","title":"Models"},{"location":"platforms/capacitor/bridge/device/#deviceinfo","text":"public class DeviceInfo { public string model ; // The device model. For example, iPhone public string platform ; // The device platform (lowercase). For example, ios , android , or web public string uuid ; // The UUID of the device as available to the app. This identifier may change on modern mobile platforms that only allow per-app install UUIDs. public string appVersion ; // The current bundle version of the app public string osVersion ; // The version of the device OS public string manufacturer ; // The manufacturer of the device public bool isVirtual ; // Whether the app is running in a simulator/emulator public long memUsed ; // Approximate memory used by the current app, in bytes. Divide by 1048576 to get the number of MBs used. public long diskFree ; // Approximate memory used by the current app, in bytes. Divide by 1048576 to get the number of MBs used. public long diskTotal ; // Approximate memory used by the current app, in bytes. Divide by 1048576 to get the number of MBs used. public long batteryLevel ; // A percentage (0 to 1) indicating how much the battery is charged public bool isCharging ; // Whether the device is charging }","title":"DeviceInfo"},{"location":"platforms/capacitor/bridge/filesystem/","text":"Filesystem iOS, Android, Electron, PWA The Filsystem API provides a NodeJS-like API for working with files on the device. Methods FilesystemBridge.AppendFile() FilesystemBridge.DeleteFile() FilesystemBridge.GetUri() FilesystemBridge.Mkdir() FilesystemBridge.ReadFile() FilesystemBridge.ReadDir() FilesystemBridge.Rmdir() FilesystemBridge.Stat() FilesystemBridge.WriteFile() Example private static async void FilesystemWriteFile () { try { var options = new FileWriteOptions { path = text.txt , data = File write test , directory = FilesystemDirectory . Documents , encoding = FilesystemEncoding . UTF8 }; var obj = await FilesystemBridge . WriteFile ( options ); Console . WriteLine ( obj ); } catch ( Exception e ) { // Handle error } } private static async void FilesystemReadFile () { try { var options = new FileReadOptions { path = text.txt , directory = FilesystemDirectory . Documents , encoding = FilesystemEncoding . UTF8 }; var obj = await FilesystemBridge . ReadFile ( options ); Console . WriteLine ( $ Data from file: {obj.data} ); } catch ( Exception e ) { // Handle error } } private static async void FilesystemAppendFile () { try { var options = new FileAppendOptions { path = text.txt , data = File Append test , directory = FilesystemDirectory . Documents , encoding = FilesystemEncoding . UTF8 }; var obj = await FilesystemBridge . AppendFile ( options ); Console . WriteLine ( obj ); } catch ( Exception e ) { // Handle error } } private static async void FilesystemDeleteFile () { try { var options = new FileDeleteOptions { path = text.txt , directory = FilesystemDirectory . Documents , }; var obj = await FilesystemBridge . DeleteFile ( options ); Console . WriteLine ( obj ); } catch ( Exception e ) { // Handle error } } private static async void FilesystemMkdir () { try { var options = new MkdirOptions { path = foo/baa/doo , directory = FilesystemDirectory . Documents , createIntermediateDirectories = true }; var obj = await FilesystemBridge . Mkdir ( options ); Console . WriteLine ( obj ); } catch ( Exception e ) { // Handle error } } private static async void FilesystemStat () { try { var options = new StatOptions { path = foo/baa/doo , directory = FilesystemDirectory . Documents }; var obj = await FilesystemBridge . Stat ( options ); Console . WriteLine ( $ {obj.type} : {obj.ctime} : {obj.mtime} : {obj.size} : {obj.uri} ); } catch ( Exception e ) { // Handle error } } private static async void FilesystemRmdir () { try { var options = new RmdirOptions { path = foo/baa/doo , directory = FilesystemDirectory . Documents }; var obj = await FilesystemBridge . Rmdir ( options ); Console . WriteLine ( obj ); } catch ( Exception e ) { // Handle error } } private static async void FilesystemReaddir () { try { var options = new ReaddirOptions { path = , directory = FilesystemDirectory . Documents }; var obj = await FilesystemBridge . ReadDir ( options ); foreach ( var file in obj . files ) { Console . WriteLine ( file ); } } catch ( Exception e ) { // Handle error } } private static async void FilesystemGetUri () { try { var options = new GetUriOptions { path = text.txt , directory = FilesystemDirectory . Documents }; var obj = await FilesystemBridge . GetUri ( options ); Console . WriteLine ( obj . uri ); } catch ( Exception e ) { // Handle error } } API AppendFile static Task FileAppendResult AppendFile( FileAppendOptions options) DeleteFile static Task FileDeleteResult DeleteFile( FileDeleteOptions options) GetUri static Task GetUriResult GetUri( GetUriOptions options) = Mkdir static Task MkdirResult Mkdir( MkdirOptions options) = ReadFile static Task FileReadResult ReadFile( FileReadOptions options) = ReadDir static Task ReaddirResult ReadDir( ReaddirOptions options) = Rmdir static Task RmdirResult Rmdir( RmdirOptions options) = Stat static Task StatResult Stat( StatOptions options) = WriteFile static Task FileWriteResult WriteFile( FileWriteOptions options) = Models FileAppendOptions public class FileAppendOptions : FileWriteOptions {} FileWriteOptions public class FileWriteOptions : FileReadOptions { public string data ; // The data to write } FileReadOptions public class FileReadOptions : FileDeleteOptions { public FilesystemEncoding encoding ; // The encoding to write the file in (defautls to utf8) } GetUriOptions public class GetUriOptions : FileDeleteOptions { } ReaddirOptions public class ReaddirOptions : FileDeleteOptions { } RmdirOptions public class RmdirOptions : FileDeleteOptions { } StatOptions public class StatOptions : FileDeleteOptions { } FileDeleteOptions public class FileDeleteOptions { public string path ; // the filename to delete/read/write public FilesystemDirectory directory ; // The FilesystemDirectory to store the file in } MkdirOptions public class MkdirOptions : FileDeleteOptions { public bool createIntermediateDirectories ; // Whether to create any missing parent directories as well } GetUriResult public class GetUriResult { public string uri ; } FileAppendResult public class FileAppendResult { } FileDeleteResult public class FileDeleteResult { } MkdirResult public class MkdirResult { } FileWriteResult public class FileWriteResult { } FileReadResult public class FileReadResult { public string data ; // The data read from the file } ReaddirResult public class ReaddirResult { public string [] files ; // Files or directories in directory } RmdirResult public class RmdirResult { } StatResult public class StatResult { public string type ; // type (directory / file) public long size ; // size of file public long ctime ; // creation time public long mtime ; // modified time public string uri ; // path } FilesystemDirectory public enum FilesystemDirectory { Application , Documents , Data , Cache , External , ExternalStorage } FilesystemEncoding public enum FilesystemEncoding { UTF8 , ASCII , UTF16 , }","title":"Filesystem"},{"location":"platforms/capacitor/bridge/filesystem/#filesystem","text":"iOS, Android, Electron, PWA The Filsystem API provides a NodeJS-like API for working with files on the device.","title":"Filesystem"},{"location":"platforms/capacitor/bridge/filesystem/#methods","text":"FilesystemBridge.AppendFile() FilesystemBridge.DeleteFile() FilesystemBridge.GetUri() FilesystemBridge.Mkdir() FilesystemBridge.ReadFile() FilesystemBridge.ReadDir() FilesystemBridge.Rmdir() FilesystemBridge.Stat() FilesystemBridge.WriteFile()","title":"Methods"},{"location":"platforms/capacitor/bridge/filesystem/#example","text":"private static async void FilesystemWriteFile () { try { var options = new FileWriteOptions { path = text.txt , data = File write test , directory = FilesystemDirectory . Documents , encoding = FilesystemEncoding . UTF8 }; var obj = await FilesystemBridge . WriteFile ( options ); Console . WriteLine ( obj ); } catch ( Exception e ) { // Handle error } } private static async void FilesystemReadFile () { try { var options = new FileReadOptions { path = text.txt , directory = FilesystemDirectory . Documents , encoding = FilesystemEncoding . UTF8 }; var obj = await FilesystemBridge . ReadFile ( options ); Console . WriteLine ( $ Data from file: {obj.data} ); } catch ( Exception e ) { // Handle error } } private static async void FilesystemAppendFile () { try { var options = new FileAppendOptions { path = text.txt , data = File Append test , directory = FilesystemDirectory . Documents , encoding = FilesystemEncoding . UTF8 }; var obj = await FilesystemBridge . AppendFile ( options ); Console . WriteLine ( obj ); } catch ( Exception e ) { // Handle error } } private static async void FilesystemDeleteFile () { try { var options = new FileDeleteOptions { path = text.txt , directory = FilesystemDirectory . Documents , }; var obj = await FilesystemBridge . DeleteFile ( options ); Console . WriteLine ( obj ); } catch ( Exception e ) { // Handle error } } private static async void FilesystemMkdir () { try { var options = new MkdirOptions { path = foo/baa/doo , directory = FilesystemDirectory . Documents , createIntermediateDirectories = true }; var obj = await FilesystemBridge . Mkdir ( options ); Console . WriteLine ( obj ); } catch ( Exception e ) { // Handle error } } private static async void FilesystemStat () { try { var options = new StatOptions { path = foo/baa/doo , directory = FilesystemDirectory . Documents }; var obj = await FilesystemBridge . Stat ( options ); Console . WriteLine ( $ {obj.type} : {obj.ctime} : {obj.mtime} : {obj.size} : {obj.uri} ); } catch ( Exception e ) { // Handle error } } private static async void FilesystemRmdir () { try { var options = new RmdirOptions { path = foo/baa/doo , directory = FilesystemDirectory . Documents }; var obj = await FilesystemBridge . Rmdir ( options ); Console . WriteLine ( obj ); } catch ( Exception e ) { // Handle error } } private static async void FilesystemReaddir () { try { var options = new ReaddirOptions { path = , directory = FilesystemDirectory . Documents }; var obj = await FilesystemBridge . ReadDir ( options ); foreach ( var file in obj . files ) { Console . WriteLine ( file ); } } catch ( Exception e ) { // Handle error } } private static async void FilesystemGetUri () { try { var options = new GetUriOptions { path = text.txt , directory = FilesystemDirectory . Documents }; var obj = await FilesystemBridge . GetUri ( options ); Console . WriteLine ( obj . uri ); } catch ( Exception e ) { // Handle error } }","title":"Example"},{"location":"platforms/capacitor/bridge/filesystem/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/filesystem/#appendfile","text":"static Task FileAppendResult AppendFile( FileAppendOptions options)","title":"AppendFile"},{"location":"platforms/capacitor/bridge/filesystem/#deletefile","text":"static Task FileDeleteResult DeleteFile( FileDeleteOptions options)","title":"DeleteFile"},{"location":"platforms/capacitor/bridge/filesystem/#geturi","text":"static Task GetUriResult GetUri( GetUriOptions options) =","title":"GetUri"},{"location":"platforms/capacitor/bridge/filesystem/#mkdir","text":"static Task MkdirResult Mkdir( MkdirOptions options) =","title":"Mkdir"},{"location":"platforms/capacitor/bridge/filesystem/#readfile","text":"static Task FileReadResult ReadFile( FileReadOptions options) =","title":"ReadFile"},{"location":"platforms/capacitor/bridge/filesystem/#readdir","text":"static Task ReaddirResult ReadDir( ReaddirOptions options) =","title":"ReadDir"},{"location":"platforms/capacitor/bridge/filesystem/#rmdir","text":"static Task RmdirResult Rmdir( RmdirOptions options) =","title":"Rmdir"},{"location":"platforms/capacitor/bridge/filesystem/#stat","text":"static Task StatResult Stat( StatOptions options) =","title":"Stat"},{"location":"platforms/capacitor/bridge/filesystem/#writefile","text":"static Task FileWriteResult WriteFile( FileWriteOptions options) =","title":"WriteFile"},{"location":"platforms/capacitor/bridge/filesystem/#models","text":"","title":"Models"},{"location":"platforms/capacitor/bridge/filesystem/#fileappendoptions","text":"public class FileAppendOptions : FileWriteOptions {}","title":"FileAppendOptions"},{"location":"platforms/capacitor/bridge/filesystem/#filewriteoptions","text":"public class FileWriteOptions : FileReadOptions { public string data ; // The data to write }","title":"FileWriteOptions"},{"location":"platforms/capacitor/bridge/filesystem/#filereadoptions","text":"public class FileReadOptions : FileDeleteOptions { public FilesystemEncoding encoding ; // The encoding to write the file in (defautls to utf8) }","title":"FileReadOptions"},{"location":"platforms/capacitor/bridge/filesystem/#geturioptions","text":"public class GetUriOptions : FileDeleteOptions { }","title":"GetUriOptions"},{"location":"platforms/capacitor/bridge/filesystem/#readdiroptions","text":"public class ReaddirOptions : FileDeleteOptions { }","title":"ReaddirOptions"},{"location":"platforms/capacitor/bridge/filesystem/#rmdiroptions","text":"public class RmdirOptions : FileDeleteOptions { }","title":"RmdirOptions"},{"location":"platforms/capacitor/bridge/filesystem/#statoptions","text":"public class StatOptions : FileDeleteOptions { }","title":"StatOptions"},{"location":"platforms/capacitor/bridge/filesystem/#filedeleteoptions","text":"public class FileDeleteOptions { public string path ; // the filename to delete/read/write public FilesystemDirectory directory ; // The FilesystemDirectory to store the file in }","title":"FileDeleteOptions"},{"location":"platforms/capacitor/bridge/filesystem/#mkdiroptions","text":"public class MkdirOptions : FileDeleteOptions { public bool createIntermediateDirectories ; // Whether to create any missing parent directories as well }","title":"MkdirOptions"},{"location":"platforms/capacitor/bridge/filesystem/#geturiresult","text":"public class GetUriResult { public string uri ; }","title":"GetUriResult"},{"location":"platforms/capacitor/bridge/filesystem/#fileappendresult","text":"public class FileAppendResult { }","title":"FileAppendResult"},{"location":"platforms/capacitor/bridge/filesystem/#filedeleteresult","text":"public class FileDeleteResult { }","title":"FileDeleteResult"},{"location":"platforms/capacitor/bridge/filesystem/#mkdirresult","text":"public class MkdirResult { }","title":"MkdirResult"},{"location":"platforms/capacitor/bridge/filesystem/#filewriteresult","text":"public class FileWriteResult { }","title":"FileWriteResult"},{"location":"platforms/capacitor/bridge/filesystem/#filereadresult","text":"public class FileReadResult { public string data ; // The data read from the file }","title":"FileReadResult"},{"location":"platforms/capacitor/bridge/filesystem/#readdirresult","text":"public class ReaddirResult { public string [] files ; // Files or directories in directory }","title":"ReaddirResult"},{"location":"platforms/capacitor/bridge/filesystem/#rmdirresult","text":"public class RmdirResult { }","title":"RmdirResult"},{"location":"platforms/capacitor/bridge/filesystem/#statresult","text":"public class StatResult { public string type ; // type (directory / file) public long size ; // size of file public long ctime ; // creation time public long mtime ; // modified time public string uri ; // path }","title":"StatResult"},{"location":"platforms/capacitor/bridge/filesystem/#filesystemdirectory","text":"public enum FilesystemDirectory { Application , Documents , Data , Cache , External , ExternalStorage }","title":"FilesystemDirectory"},{"location":"platforms/capacitor/bridge/filesystem/#filesystemencoding","text":"public enum FilesystemEncoding { UTF8 , ASCII , UTF16 , }","title":"FilesystemEncoding"},{"location":"platforms/capacitor/bridge/geolocation/","text":"Geolocation iOS, Android, Electron, PWA The Geolocation API provides simple methods for getting and tracking the current position of the device using GPS, along with altitude, heading, and speed information if available. Methods GeolocationBridge.GetCurrentPosition() GeolocationBridge.WatchPosition() GeolocationBridge.ClearWatch() Example GeolocationPosition CurrentPosition ; private async Task GeolocationCurrentPosition () { try { CurrentPosition = await GeolocationBridge . GetCurrentPosition (); } catch ( Exception e ) { // Handle error } } private string WatcherID ; private async Task GeolocationWatch () { if ( WatcherID == null ) { try { var opts = new GeolocationOptions { enableHighAccuracy = false , requireAltitude = false }; WatcherID = await GeolocationBridge . WatchPosition ( opts , async ( newPosition ) = { CurrentPosition = newPosition ; }); } catch ( Exception e ) { // Handle error } } else { try { await GeolocationBridge . ClearWatch ( WatcherID ); WatcherID = null ; CurrentPosition = null ; } catch ( Exception e ) { // Handle error } } } API GetCurrentPosition Get the current GPS location of the device static Task GeolocationPosition GetCurrentPosition( GeolocationOptions options = null) WatchPosition Set up a watch for location changes. Note that watching for location changes can consume a large amount of energy. Be smart about listening only when you need to. static async Task string WatchPosition( GeolocationOptions options, Action GeolocationPosition callback) ClearWatch Clear a given watch static Task ClearWatch(string watcherId) Models GeolocationOptions public class GeolocationOptions { public bool enableHighAccuracy ; public long maximumAge ; public bool requireAltitude ; public long timeout ; } GeolocationPosition public class GeolocationPosition { public GeolocationCoord coords ; } GeolocationCoord public class GeolocationCoord { public long latitude ; public long longitude ; public long accuracy ; public long altitude ; public long speed ; public long heading ; }","title":"Geolocation"},{"location":"platforms/capacitor/bridge/geolocation/#geolocation","text":"iOS, Android, Electron, PWA The Geolocation API provides simple methods for getting and tracking the current position of the device using GPS, along with altitude, heading, and speed information if available.","title":"Geolocation"},{"location":"platforms/capacitor/bridge/geolocation/#methods","text":"GeolocationBridge.GetCurrentPosition() GeolocationBridge.WatchPosition() GeolocationBridge.ClearWatch()","title":"Methods"},{"location":"platforms/capacitor/bridge/geolocation/#example","text":"GeolocationPosition CurrentPosition ; private async Task GeolocationCurrentPosition () { try { CurrentPosition = await GeolocationBridge . GetCurrentPosition (); } catch ( Exception e ) { // Handle error } } private string WatcherID ; private async Task GeolocationWatch () { if ( WatcherID == null ) { try { var opts = new GeolocationOptions { enableHighAccuracy = false , requireAltitude = false }; WatcherID = await GeolocationBridge . WatchPosition ( opts , async ( newPosition ) = { CurrentPosition = newPosition ; }); } catch ( Exception e ) { // Handle error } } else { try { await GeolocationBridge . ClearWatch ( WatcherID ); WatcherID = null ; CurrentPosition = null ; } catch ( Exception e ) { // Handle error } } }","title":"Example"},{"location":"platforms/capacitor/bridge/geolocation/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/geolocation/#getcurrentposition","text":"Get the current GPS location of the device static Task GeolocationPosition GetCurrentPosition( GeolocationOptions options = null)","title":"GetCurrentPosition"},{"location":"platforms/capacitor/bridge/geolocation/#watchposition","text":"Set up a watch for location changes. Note that watching for location changes can consume a large amount of energy. Be smart about listening only when you need to. static async Task string WatchPosition( GeolocationOptions options, Action GeolocationPosition callback)","title":"WatchPosition"},{"location":"platforms/capacitor/bridge/geolocation/#clearwatch","text":"Clear a given watch static Task ClearWatch(string watcherId)","title":"ClearWatch"},{"location":"platforms/capacitor/bridge/geolocation/#models","text":"","title":"Models"},{"location":"platforms/capacitor/bridge/geolocation/#geolocationoptions","text":"public class GeolocationOptions { public bool enableHighAccuracy ; public long maximumAge ; public bool requireAltitude ; public long timeout ; }","title":"GeolocationOptions"},{"location":"platforms/capacitor/bridge/geolocation/#geolocationposition","text":"public class GeolocationPosition { public GeolocationCoord coords ; }","title":"GeolocationPosition"},{"location":"platforms/capacitor/bridge/geolocation/#geolocationcoord","text":"public class GeolocationCoord { public long latitude ; public long longitude ; public long accuracy ; public long altitude ; public long speed ; public long heading ; }","title":"GeolocationCoord"},{"location":"platforms/capacitor/bridge/haptics/","text":"Haptics iOS, Android The Haptics API provides physical feedback to the user through touch or vibration. Methods HapticsBridge.Vibrate() HapticsBridge.Impact() HapticsBridge.SelectionStart() HapticsBridge.SelectionChanged() HapticsBridge.SelectionEnd() Example private static async void HapticsVibrate () { try { await HapticsBridge . Vibrate (); } catch ( Exception e ) { // Handle error } } private static async void HapticsImpact ( HapticsImpactStyle style ) { try { await HapticsBridge . Impact ( style ); } catch ( Exception e ) { // Handle error } } private static async void HapticsSelectionStart () { try { await HapticsBridge . SelectionStart (); } catch ( Exception e ) { // Handle error } } private static async void HapticsSelectionChanged () { try { await HapticsBridge . SelectionChanged (); } catch ( Exception e ) { // Handle error } } private static async void HapticsSelectionEnd () { try { await HapticsBridge . SelectionEnd (); } catch ( Exception e ) { // Handle error } } API Vibrate Vibrate the device static Task Vibrate() Impact Trigger a haptics \"impact\" feedback static Task Impact( HapticsImpactStyle style) SelectionStart Trigger a selection started haptic hint static Task SelectionStart() SelectionChanged Trigger a selection changed haptic hint. If a selection was started already, this will cause the device to provide haptic feedback (on iOS at least) static Task SelectionChanged() SelectionEnd If selectionStart() was called, selectionEnd() ends the selection. For example, call this when a user has lifted their finger from a control static Task SelectionEnd() Models HapticsImpactStyle public enum HapticsImpactStyle { Heavy , Medium , Light }","title":"Haptics"},{"location":"platforms/capacitor/bridge/haptics/#haptics","text":"iOS, Android The Haptics API provides physical feedback to the user through touch or vibration.","title":"Haptics"},{"location":"platforms/capacitor/bridge/haptics/#methods","text":"HapticsBridge.Vibrate() HapticsBridge.Impact() HapticsBridge.SelectionStart() HapticsBridge.SelectionChanged() HapticsBridge.SelectionEnd()","title":"Methods"},{"location":"platforms/capacitor/bridge/haptics/#example","text":"private static async void HapticsVibrate () { try { await HapticsBridge . Vibrate (); } catch ( Exception e ) { // Handle error } } private static async void HapticsImpact ( HapticsImpactStyle style ) { try { await HapticsBridge . Impact ( style ); } catch ( Exception e ) { // Handle error } } private static async void HapticsSelectionStart () { try { await HapticsBridge . SelectionStart (); } catch ( Exception e ) { // Handle error } } private static async void HapticsSelectionChanged () { try { await HapticsBridge . SelectionChanged (); } catch ( Exception e ) { // Handle error } } private static async void HapticsSelectionEnd () { try { await HapticsBridge . SelectionEnd (); } catch ( Exception e ) { // Handle error } }","title":"Example"},{"location":"platforms/capacitor/bridge/haptics/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/haptics/#vibrate","text":"Vibrate the device static Task Vibrate()","title":"Vibrate"},{"location":"platforms/capacitor/bridge/haptics/#impact","text":"Trigger a haptics \"impact\" feedback static Task Impact( HapticsImpactStyle style)","title":"Impact"},{"location":"platforms/capacitor/bridge/haptics/#selectionstart","text":"Trigger a selection started haptic hint static Task SelectionStart()","title":"SelectionStart"},{"location":"platforms/capacitor/bridge/haptics/#selectionchanged","text":"Trigger a selection changed haptic hint. If a selection was started already, this will cause the device to provide haptic feedback (on iOS at least) static Task SelectionChanged()","title":"SelectionChanged"},{"location":"platforms/capacitor/bridge/haptics/#selectionend","text":"If selectionStart() was called, selectionEnd() ends the selection. For example, call this when a user has lifted their finger from a control static Task SelectionEnd()","title":"SelectionEnd"},{"location":"platforms/capacitor/bridge/haptics/#models","text":"","title":"Models"},{"location":"platforms/capacitor/bridge/haptics/#hapticsimpactstyle","text":"public enum HapticsImpactStyle { Heavy , Medium , Light }","title":"HapticsImpactStyle"},{"location":"platforms/capacitor/bridge/keyboard/","text":"Keyboard iOS, Android The Background Task API makes it easy to run background tasks. Currently, this plugin supports running a task when the app is backgrounded, and soon will support periodic background fetch operations. Methods KeyboardBridge.RegisterEventListeners() KeyboardBridge.Show() KeyboardBridge.Hide() KeyboardBridge.SetAccessoryBarVisible() KeyboardBridge.AddEventListener() KeyboardBridge.RemoveEventListener() Example private static async Task KeyboardShow () { try { await KeyboardBridge . Show (); } catch ( Exception e ) { // Handle error } } private static async Task KeyboardSetAccessoryBarVisible () { try { await KeyboardBridge . SetAccessoryBarVisible ( true ); } catch ( Exception e ) { // Handle error } } private static async Task KeyboardSetAccessoryBarHidden () { try { await KeyboardBridge . SetAccessoryBarVisible ( false ); } catch ( Exception e ) { // Handle error } } private static async Task KeyboardHide () { try { await KeyboardBridge . Hide (); } catch ( Exception e ) { // Handle error } } private static async Task KeyboardEvents () { try { await KeyboardBridge . RegisterEventListeners (); KeyboardBridge . AddEventListener ( KeyboardEvent . KeyboardWillShow , ( e ) = Console . WriteLine ( $ Received KeyboardWillShow event: {e} )); KeyboardBridge . AddEventListener ( KeyboardEvent . KeyboardDidShow , ( e ) = Console . WriteLine ( $ Received KeyboardDidShow event: {e} )); KeyboardBridge . AddEventListener ( KeyboardEvent . KeyboardWillHide , ( e ) = Console . WriteLine ( $ Received KeyboardWillHide event: {e} )); KeyboardBridge . AddEventListener ( KeyboardEvent . KeyboardDidHide , ( e ) = Console . WriteLine ( $ Received KeyboardDidHide event: {e} )); } catch ( Exception e ) { // Handle error } } API RegisterEventListeners Initializes event listeners to allow for updates. Use AddEventListener to add listener function for specific event. static Task object RegisterEventListeners() Show Show the keyboard. This method is alpha and may have issues static Task object Show() Hide Hide the keyboard. static Task object Hide() SetAccessoryBarVisible Set whether the accessory bar should be visible on the keyboard. We recommend disabling the accessory bar for short forms (login, signup, etc.) to provide a cleaner UI static Task object SetAccessoryBarVisible(bool isVisible) AddEventListener Subscribe to keyboard events. static void AddEventListener( KeyboardEvent eventType, Action string callback) RemoveEventListener Unsubscribe to keyboard events. static void RemoveEventListener( KeyboardEvent eventType, Action string callback) { Models KeyboardEvent public enum KeyboardEvent { KeyboardWillShow , KeyboardDidShow , KeyboardWillHide , KeyboardDidHide }","title":"Keyboard"},{"location":"platforms/capacitor/bridge/keyboard/#keyboard","text":"iOS, Android The Background Task API makes it easy to run background tasks. Currently, this plugin supports running a task when the app is backgrounded, and soon will support periodic background fetch operations.","title":"Keyboard"},{"location":"platforms/capacitor/bridge/keyboard/#methods","text":"KeyboardBridge.RegisterEventListeners() KeyboardBridge.Show() KeyboardBridge.Hide() KeyboardBridge.SetAccessoryBarVisible() KeyboardBridge.AddEventListener() KeyboardBridge.RemoveEventListener()","title":"Methods"},{"location":"platforms/capacitor/bridge/keyboard/#example","text":"private static async Task KeyboardShow () { try { await KeyboardBridge . Show (); } catch ( Exception e ) { // Handle error } } private static async Task KeyboardSetAccessoryBarVisible () { try { await KeyboardBridge . SetAccessoryBarVisible ( true ); } catch ( Exception e ) { // Handle error } } private static async Task KeyboardSetAccessoryBarHidden () { try { await KeyboardBridge . SetAccessoryBarVisible ( false ); } catch ( Exception e ) { // Handle error } } private static async Task KeyboardHide () { try { await KeyboardBridge . Hide (); } catch ( Exception e ) { // Handle error } } private static async Task KeyboardEvents () { try { await KeyboardBridge . RegisterEventListeners (); KeyboardBridge . AddEventListener ( KeyboardEvent . KeyboardWillShow , ( e ) = Console . WriteLine ( $ Received KeyboardWillShow event: {e} )); KeyboardBridge . AddEventListener ( KeyboardEvent . KeyboardDidShow , ( e ) = Console . WriteLine ( $ Received KeyboardDidShow event: {e} )); KeyboardBridge . AddEventListener ( KeyboardEvent . KeyboardWillHide , ( e ) = Console . WriteLine ( $ Received KeyboardWillHide event: {e} )); KeyboardBridge . AddEventListener ( KeyboardEvent . KeyboardDidHide , ( e ) = Console . WriteLine ( $ Received KeyboardDidHide event: {e} )); } catch ( Exception e ) { // Handle error } }","title":"Example"},{"location":"platforms/capacitor/bridge/keyboard/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/keyboard/#registereventlisteners","text":"Initializes event listeners to allow for updates. Use AddEventListener to add listener function for specific event. static Task object RegisterEventListeners()","title":"RegisterEventListeners"},{"location":"platforms/capacitor/bridge/keyboard/#show","text":"Show the keyboard. This method is alpha and may have issues static Task object Show()","title":"Show"},{"location":"platforms/capacitor/bridge/keyboard/#hide","text":"Hide the keyboard. static Task object Hide()","title":"Hide"},{"location":"platforms/capacitor/bridge/keyboard/#setaccessorybarvisible","text":"Set whether the accessory bar should be visible on the keyboard. We recommend disabling the accessory bar for short forms (login, signup, etc.) to provide a cleaner UI static Task object SetAccessoryBarVisible(bool isVisible)","title":"SetAccessoryBarVisible"},{"location":"platforms/capacitor/bridge/keyboard/#addeventlistener","text":"Subscribe to keyboard events. static void AddEventListener( KeyboardEvent eventType, Action string callback)","title":"AddEventListener"},{"location":"platforms/capacitor/bridge/keyboard/#removeeventlistener","text":"Unsubscribe to keyboard events. static void RemoveEventListener( KeyboardEvent eventType, Action string callback) {","title":"RemoveEventListener"},{"location":"platforms/capacitor/bridge/keyboard/#models","text":"","title":"Models"},{"location":"platforms/capacitor/bridge/keyboard/#keyboardevent","text":"public enum KeyboardEvent { KeyboardWillShow , KeyboardDidShow , KeyboardWillHide , KeyboardDidHide }","title":"KeyboardEvent"},{"location":"platforms/capacitor/bridge/modals/","text":"Modals iOS, Android, Electron, PWA The Modals API provides methods for triggering native modal windows for alerts, confirmations, and input prompts, as well as Action Sheets. Methods ModalsBridge.Alert() ModalsBridge.Confirm() ModalsBridge.Prompt() ModalsBridge.ShowActions() Example private static async Task ModalsAlert () { try { var options = new AlertOptions { title = \ud83e\udd16 Bionic Alert , message = Capacitor Bridge is now available. , buttonTitle = Got it! }; await ModalsBridge . Alert ( options ); } catch ( Exception e ) { // Handle error } } private static async Task ModalsConfirm () { try { var options = new ConfirmOptions { title = \ud83e\udd16 Bionic Confirm , message = Adding exoskeleton... , okButtonTitle = \ud83d\udc80 Proceed , cancelButtonTitle = Stop }; var result = await ModalsBridge . Confirm ( options ); Console . WriteLine ( result . value ? \ud83d\udc80 You chose to proceed : \u2620 Enjoy your weak limbs ); } catch ( Exception e ) { // Handle error } } private static async Task ModalsPrompt () { try { var options = new PromptOptions { title = \ud83e\udd16 Bionic Prompt , message = Please insert your Bionic name , okButtonTitle = Move on... , cancelButtonTitle = Nope , inputPlaceholder = 01001001 }; var result = await ModalsBridge . Prompt ( options ); Console . WriteLine ( result . cancelled ? I m \ud83d\udc94 : $ We \ud83d\udc98 you - {result.value} ); } catch ( Exception e ) { // Handle error } } private static async Task ModalsShowActions () { try { var options = new ActionSheetOptions { title = \ud83e\udd16 Bionic Show Actions , message = Choose your upgrade: , options = new ActionSheetOption [ 3 ] { new ActionSheetOption { title = Titanium Exoskeleton , style = ActionSheetOptionStyle . Default , icon = nuclear }, new ActionSheetOption { title = Cybernetic Eye , style = ActionSheetOptionStyle . Destructive , icon = eye }, new ActionSheetOption { title = I m good, thanks! , style = ActionSheetOptionStyle . Cancel , } } }; var result = await ModalsBridge . ShowActions ( options ); var msg = You re already perfect! ; if ( result . index != options . options . Length - 1 ) { msg = result . index == 0 ? Enjoy your new \ud83d\udcaa : Enjoy your new \ud83d\udc41 ; } Console . WriteLine ( msg ); } catch ( Exception e ) { // Handle error } } API Alert Show an alert modal static Task Alert(AlertOptions options) Confirm Show a confirmation modal static Task ConfirmResult Confirm( ConfirmOptions options) Prompt Show a prompt modal static Task PromptResult Prompt( PromptOptions options) ShowActions Show an Action Sheet style modal with various options for the user to select. static Task ActionSheetResult ShowActions( ActionSheetOptions options) Models AlertOptions public class AlertOptions { public string title ; public string message ; public string buttonTitle ; } ConfirmOptions public class ConfirmOptions { public string title ; public string message ; public string okButtonTitle ; public string cancelButtonTitle ; } ConfirmResult public class ConfirmResult { public bool value ; } PromptOptions public class PromptOptions { public string title ; public string message ; public string okButtonTitle ; public string cancelButtonTitle ; public string inputPlaceholder ; } PromptResult public class PromptResult { public bool cancelled ; public string value ; } ActionSheetOptions public class ActionSheetOptions { public string title ; public string message ; public ActionSheetOption [] options ; } ActionSheetOption public class ActionSheetOption { public string title ; public string style ; public string icon ; } ActionSheetResult public class ActionSheetResult { public long index ; } ActionSheetOptionStyle public static class ActionSheetOptionStyle { public static string Default = DEFAULT ; public static string Destructive = DESTRUCTIVE ; public static string Cancel = CANCEL ; }","title":"Modals"},{"location":"platforms/capacitor/bridge/modals/#modals","text":"iOS, Android, Electron, PWA The Modals API provides methods for triggering native modal windows for alerts, confirmations, and input prompts, as well as Action Sheets.","title":"Modals"},{"location":"platforms/capacitor/bridge/modals/#methods","text":"ModalsBridge.Alert() ModalsBridge.Confirm() ModalsBridge.Prompt() ModalsBridge.ShowActions()","title":"Methods"},{"location":"platforms/capacitor/bridge/modals/#example","text":"private static async Task ModalsAlert () { try { var options = new AlertOptions { title = \ud83e\udd16 Bionic Alert , message = Capacitor Bridge is now available. , buttonTitle = Got it! }; await ModalsBridge . Alert ( options ); } catch ( Exception e ) { // Handle error } } private static async Task ModalsConfirm () { try { var options = new ConfirmOptions { title = \ud83e\udd16 Bionic Confirm , message = Adding exoskeleton... , okButtonTitle = \ud83d\udc80 Proceed , cancelButtonTitle = Stop }; var result = await ModalsBridge . Confirm ( options ); Console . WriteLine ( result . value ? \ud83d\udc80 You chose to proceed : \u2620 Enjoy your weak limbs ); } catch ( Exception e ) { // Handle error } } private static async Task ModalsPrompt () { try { var options = new PromptOptions { title = \ud83e\udd16 Bionic Prompt , message = Please insert your Bionic name , okButtonTitle = Move on... , cancelButtonTitle = Nope , inputPlaceholder = 01001001 }; var result = await ModalsBridge . Prompt ( options ); Console . WriteLine ( result . cancelled ? I m \ud83d\udc94 : $ We \ud83d\udc98 you - {result.value} ); } catch ( Exception e ) { // Handle error } } private static async Task ModalsShowActions () { try { var options = new ActionSheetOptions { title = \ud83e\udd16 Bionic Show Actions , message = Choose your upgrade: , options = new ActionSheetOption [ 3 ] { new ActionSheetOption { title = Titanium Exoskeleton , style = ActionSheetOptionStyle . Default , icon = nuclear }, new ActionSheetOption { title = Cybernetic Eye , style = ActionSheetOptionStyle . Destructive , icon = eye }, new ActionSheetOption { title = I m good, thanks! , style = ActionSheetOptionStyle . Cancel , } } }; var result = await ModalsBridge . ShowActions ( options ); var msg = You re already perfect! ; if ( result . index != options . options . Length - 1 ) { msg = result . index == 0 ? Enjoy your new \ud83d\udcaa : Enjoy your new \ud83d\udc41 ; } Console . WriteLine ( msg ); } catch ( Exception e ) { // Handle error } }","title":"Example"},{"location":"platforms/capacitor/bridge/modals/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/modals/#alert","text":"Show an alert modal static Task Alert(AlertOptions options)","title":"Alert"},{"location":"platforms/capacitor/bridge/modals/#confirm","text":"Show a confirmation modal static Task ConfirmResult Confirm( ConfirmOptions options)","title":"Confirm"},{"location":"platforms/capacitor/bridge/modals/#prompt","text":"Show a prompt modal static Task PromptResult Prompt( PromptOptions options)","title":"Prompt"},{"location":"platforms/capacitor/bridge/modals/#showactions","text":"Show an Action Sheet style modal with various options for the user to select. static Task ActionSheetResult ShowActions( ActionSheetOptions options)","title":"ShowActions"},{"location":"platforms/capacitor/bridge/modals/#models","text":"","title":"Models"},{"location":"platforms/capacitor/bridge/modals/#alertoptions","text":"public class AlertOptions { public string title ; public string message ; public string buttonTitle ; }","title":"AlertOptions"},{"location":"platforms/capacitor/bridge/modals/#confirmoptions","text":"public class ConfirmOptions { public string title ; public string message ; public string okButtonTitle ; public string cancelButtonTitle ; }","title":"ConfirmOptions"},{"location":"platforms/capacitor/bridge/modals/#confirmresult","text":"public class ConfirmResult { public bool value ; }","title":"ConfirmResult"},{"location":"platforms/capacitor/bridge/modals/#promptoptions","text":"public class PromptOptions { public string title ; public string message ; public string okButtonTitle ; public string cancelButtonTitle ; public string inputPlaceholder ; }","title":"PromptOptions"},{"location":"platforms/capacitor/bridge/modals/#promptresult","text":"public class PromptResult { public bool cancelled ; public string value ; }","title":"PromptResult"},{"location":"platforms/capacitor/bridge/modals/#actionsheetoptions","text":"public class ActionSheetOptions { public string title ; public string message ; public ActionSheetOption [] options ; }","title":"ActionSheetOptions"},{"location":"platforms/capacitor/bridge/modals/#actionsheetoption","text":"public class ActionSheetOption { public string title ; public string style ; public string icon ; }","title":"ActionSheetOption"},{"location":"platforms/capacitor/bridge/modals/#actionsheetresult","text":"public class ActionSheetResult { public long index ; }","title":"ActionSheetResult"},{"location":"platforms/capacitor/bridge/modals/#actionsheetoptionstyle","text":"public static class ActionSheetOptionStyle { public static string Default = DEFAULT ; public static string Destructive = DESTRUCTIVE ; public static string Cancel = CANCEL ; }","title":"ActionSheetOptionStyle"},{"location":"platforms/capacitor/bridge/motion/","text":"Motion iOS, Android, Electron, PWA The Motion API tracks accelerometer and device orientation (compass heading, etc.) Methods MotionBridge.AddAccelListener() MotionBridge.AddOrientationListener() MotionBridge.RemoveListener() Example private MotionEventResult CurrentAccel ; private string MotionAccelWatcherID ; private async Task MotionAccel () { if ( MotionAccelWatcherID == null ) { MotionAccelWatcherID = my-motion-accel-listener ; try { await MotionBridge . AddAccelListener ( MotionAccelWatcherID , async ( result ) = { CurrentAccel = result ; }); } catch ( Exception e ) { // Handle error } } else { try { await MotionBridge . RemoveListener ( MotionAccelWatcherID ); MotionAccelWatcherID = null ; CurrentAccel = null ; } catch ( Exception e ) { // Handle error } } } private MotionOrientationEventResult CurrentOrientation ; private string MotionOrientationWatcherID ; private async Task MotionOrientation () { if ( MotionOrientationWatcherID == null ) { MotionOrientationWatcherID = my-motion-orientation-listener ; try { await MotionBridge . AddOrientationListener ( MotionOrientationWatcherID , async ( result ) = { CurrentOrientation = result ; }); } catch ( Exception e ) { // Handle error } } else { try { await MotionBridge . RemoveListener ( MotionAccelWatcherID ); MotionOrientationWatcherID = null ; CurrentOrientation = null ; } catch ( Exception e ) { // Hasndle error } } } API AddAccelListener Listen for accelerometer data static async Task AddAccelListener(string id, Action MotionEventResult callback) AddOrientationListener Listen for device orientation change (compass heading, etc.) static async Task AddOrientationListener(string id, Action MotionOrientationEventResult callback) RemoveListener Remove listener with given id static Task RemoveListener(string id) Models MotionEventResult public class MotionEventResult { public MotionCoords acceleration ; public MotionCoords accelerationIncludingGravity ; public MotionOrientationEventResult rotationRate ; public long interval ; } MotionCoords public class MotionCoords { public long x , y , z ; } MotionOrientationEventResult public class MotionOrientationEventResult { public long alpha , beta , gamma ; }","title":"Motion"},{"location":"platforms/capacitor/bridge/motion/#motion","text":"iOS, Android, Electron, PWA The Motion API tracks accelerometer and device orientation (compass heading, etc.)","title":"Motion"},{"location":"platforms/capacitor/bridge/motion/#methods","text":"MotionBridge.AddAccelListener() MotionBridge.AddOrientationListener() MotionBridge.RemoveListener()","title":"Methods"},{"location":"platforms/capacitor/bridge/motion/#example","text":"private MotionEventResult CurrentAccel ; private string MotionAccelWatcherID ; private async Task MotionAccel () { if ( MotionAccelWatcherID == null ) { MotionAccelWatcherID = my-motion-accel-listener ; try { await MotionBridge . AddAccelListener ( MotionAccelWatcherID , async ( result ) = { CurrentAccel = result ; }); } catch ( Exception e ) { // Handle error } } else { try { await MotionBridge . RemoveListener ( MotionAccelWatcherID ); MotionAccelWatcherID = null ; CurrentAccel = null ; } catch ( Exception e ) { // Handle error } } } private MotionOrientationEventResult CurrentOrientation ; private string MotionOrientationWatcherID ; private async Task MotionOrientation () { if ( MotionOrientationWatcherID == null ) { MotionOrientationWatcherID = my-motion-orientation-listener ; try { await MotionBridge . AddOrientationListener ( MotionOrientationWatcherID , async ( result ) = { CurrentOrientation = result ; }); } catch ( Exception e ) { // Handle error } } else { try { await MotionBridge . RemoveListener ( MotionAccelWatcherID ); MotionOrientationWatcherID = null ; CurrentOrientation = null ; } catch ( Exception e ) { // Hasndle error } } }","title":"Example"},{"location":"platforms/capacitor/bridge/motion/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/motion/#addaccellistener","text":"Listen for accelerometer data static async Task AddAccelListener(string id, Action MotionEventResult callback)","title":"AddAccelListener"},{"location":"platforms/capacitor/bridge/motion/#addorientationlistener","text":"Listen for device orientation change (compass heading, etc.) static async Task AddOrientationListener(string id, Action MotionOrientationEventResult callback)","title":"AddOrientationListener"},{"location":"platforms/capacitor/bridge/motion/#removelistener","text":"Remove listener with given id static Task RemoveListener(string id)","title":"RemoveListener"},{"location":"platforms/capacitor/bridge/motion/#models","text":"","title":"Models"},{"location":"platforms/capacitor/bridge/motion/#motioneventresult","text":"public class MotionEventResult { public MotionCoords acceleration ; public MotionCoords accelerationIncludingGravity ; public MotionOrientationEventResult rotationRate ; public long interval ; }","title":"MotionEventResult"},{"location":"platforms/capacitor/bridge/motion/#motioncoords","text":"public class MotionCoords { public long x , y , z ; }","title":"MotionCoords"},{"location":"platforms/capacitor/bridge/motion/#motionorientationeventresult","text":"public class MotionOrientationEventResult { public long alpha , beta , gamma ; }","title":"MotionOrientationEventResult"},{"location":"platforms/capacitor/bridge/network/","text":"Network iOS, Android, Electron, PWA The Network API provides events for monitoring network status changes, along with querying the current state of the network. Methods NetworkBridge.GetStatus() NetworkBridge.AddListener() NetworkBridge.RemoveListener() Example private NetworkStatus CurrentNetworkStatus ; private async Task NetworkCurrentStatus () { try { CurrentNetworkStatus = await NetworkBridge . GetStatus (); } catch ( Exception e ) { // Handle error } } private string NetworkWatcherID ; private async Task NetworkListener () { if ( NetworkWatcherID == null ) { NetworkWatcherID = my-network-listener ; try { await NetworkBridge . AddListener ( NetworkWatcherID , async ( status ) = { CurrentNetworkStatus = status ; }); } catch ( Exception e ) { // Handle error } } else { try { await NetworkBridge . RemoveListener ( NetworkWatcherID ); NetworkWatcherID = null ; CurrentNetworkStatus = null ; } catch ( Exception e ) { // Handle error } } } API GetStatus Get network status static Task NetworkStatus GetStatus() AddListener Add network status listener static async Task AddListener(string id, Action NetworkStatus callback) RemoveListener Remove network status listener static Task RemoveListener(string id) Models NetworkStatus public class NetworkStatus { public bool connected ; public string connectionType ; }","title":"Network"},{"location":"platforms/capacitor/bridge/network/#network","text":"iOS, Android, Electron, PWA The Network API provides events for monitoring network status changes, along with querying the current state of the network.","title":"Network"},{"location":"platforms/capacitor/bridge/network/#methods","text":"NetworkBridge.GetStatus() NetworkBridge.AddListener() NetworkBridge.RemoveListener()","title":"Methods"},{"location":"platforms/capacitor/bridge/network/#example","text":"private NetworkStatus CurrentNetworkStatus ; private async Task NetworkCurrentStatus () { try { CurrentNetworkStatus = await NetworkBridge . GetStatus (); } catch ( Exception e ) { // Handle error } } private string NetworkWatcherID ; private async Task NetworkListener () { if ( NetworkWatcherID == null ) { NetworkWatcherID = my-network-listener ; try { await NetworkBridge . AddListener ( NetworkWatcherID , async ( status ) = { CurrentNetworkStatus = status ; }); } catch ( Exception e ) { // Handle error } } else { try { await NetworkBridge . RemoveListener ( NetworkWatcherID ); NetworkWatcherID = null ; CurrentNetworkStatus = null ; } catch ( Exception e ) { // Handle error } } }","title":"Example"},{"location":"platforms/capacitor/bridge/network/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/network/#getstatus","text":"Get network status static Task NetworkStatus GetStatus()","title":"GetStatus"},{"location":"platforms/capacitor/bridge/network/#addlistener","text":"Add network status listener static async Task AddListener(string id, Action NetworkStatus callback)","title":"AddListener"},{"location":"platforms/capacitor/bridge/network/#removelistener","text":"Remove network status listener static Task RemoveListener(string id)","title":"RemoveListener"},{"location":"platforms/capacitor/bridge/network/#models","text":"","title":"Models"},{"location":"platforms/capacitor/bridge/network/#networkstatus","text":"public class NetworkStatus { public bool connected ; public string connectionType ; }","title":"NetworkStatus"},{"location":"platforms/capacitor/bridge/share/","text":"Share iOS, Android, PWA The Share API provides methods for sharing content in any sharing-enabled apps the user may have installed. The Share API works on iOS, Android, and the Web (using the new Web Share API ), though web support is currently spotty. Methods ShareBridge.share() Example private static async void Share () { try { var options = new ShareOptions { title = Blazor Framework , url = https://blazor.net , text = Did you try Blazor yet? , dialogTitle = Share the Blazor \ud83d\udc99 }; await ShareBridge . Share ( options ); } catch ( Exception e ) { // Handle error } } API Share Show a Share modal for sharing content in your app with other apps static Task object Share( ShareOptions shareOptions) Models ShareOptions public class ShareOptions { public string title ; // Set a title for any message. This will be the subject if sharing to email public string text ; // Set some text to share public string url ; // Set a URL to share public string dialogTitle ; // Set a title for the share modal. Android only }","title":"Share"},{"location":"platforms/capacitor/bridge/share/#share","text":"iOS, Android, PWA The Share API provides methods for sharing content in any sharing-enabled apps the user may have installed. The Share API works on iOS, Android, and the Web (using the new Web Share API ), though web support is currently spotty.","title":"Share"},{"location":"platforms/capacitor/bridge/share/#methods","text":"ShareBridge.share()","title":"Methods"},{"location":"platforms/capacitor/bridge/share/#example","text":"private static async void Share () { try { var options = new ShareOptions { title = Blazor Framework , url = https://blazor.net , text = Did you try Blazor yet? , dialogTitle = Share the Blazor \ud83d\udc99 }; await ShareBridge . Share ( options ); } catch ( Exception e ) { // Handle error } }","title":"Example"},{"location":"platforms/capacitor/bridge/share/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/share/#share_1","text":"Show a Share modal for sharing content in your app with other apps static Task object Share( ShareOptions shareOptions)","title":"Share"},{"location":"platforms/capacitor/bridge/share/#models","text":"","title":"Models"},{"location":"platforms/capacitor/bridge/share/#shareoptions","text":"public class ShareOptions { public string title ; // Set a title for any message. This will be the subject if sharing to email public string text ; // Set some text to share public string url ; // Set a URL to share public string dialogTitle ; // Set a title for the share modal. Android only }","title":"ShareOptions"},{"location":"platforms/capacitor/bridge/splash_screen/","text":"Splash Screen iOS, Android The Splash Screen API provides methods for showing or hiding a Splash image. Methods SplashScreenBridge.Show() SplashScreenBridge.Hide() Example // Show splash screen SplashScreenBridge . Show (); // Hide splash screen SplashScreenBridge . Hide (); API Show Show the splash screen static Task Show( SplashScreenShowOptions options = null) Hide Hide the splash screen static Task Hide( SplashScreenHideOptions options = null) Models SplashScreenShowOptions public class SplashScreenShowOptions { public bool autoHide ; public long fadeInDuration ; public long fadeOutDuration ; public long showDuration ; } SplashScreenHideOptions public class SplashScreenHideOptions { public long fadeOutDuration ; }","title":"Splash Screen"},{"location":"platforms/capacitor/bridge/splash_screen/#splash-screen","text":"iOS, Android The Splash Screen API provides methods for showing or hiding a Splash image.","title":"Splash Screen"},{"location":"platforms/capacitor/bridge/splash_screen/#methods","text":"SplashScreenBridge.Show() SplashScreenBridge.Hide()","title":"Methods"},{"location":"platforms/capacitor/bridge/splash_screen/#example","text":"// Show splash screen SplashScreenBridge . Show (); // Hide splash screen SplashScreenBridge . Hide ();","title":"Example"},{"location":"platforms/capacitor/bridge/splash_screen/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/splash_screen/#show","text":"Show the splash screen static Task Show( SplashScreenShowOptions options = null)","title":"Show"},{"location":"platforms/capacitor/bridge/splash_screen/#hide","text":"Hide the splash screen static Task Hide( SplashScreenHideOptions options = null)","title":"Hide"},{"location":"platforms/capacitor/bridge/splash_screen/#models","text":"","title":"Models"},{"location":"platforms/capacitor/bridge/splash_screen/#splashscreenshowoptions","text":"public class SplashScreenShowOptions { public bool autoHide ; public long fadeInDuration ; public long fadeOutDuration ; public long showDuration ; }","title":"SplashScreenShowOptions"},{"location":"platforms/capacitor/bridge/splash_screen/#splashscreenhideoptions","text":"public class SplashScreenHideOptions { public long fadeOutDuration ; }","title":"SplashScreenHideOptions"},{"location":"platforms/capacitor/bridge/status_bar/","text":"Status Bar iOS, Android The StatusBar API Provides methods for configuring the style of the Status Bar, along with showing or hiding it. Methods StatusBarBridge.Show() StatusBarBridge.Hide() StatusBarBridge.SetBackgroundColor() StatusBarBridge.SetStyle() Example // Show Status Bar StatusBarBridge . Show (); // Hide Status Bar StatusBarBridge . Hide (); // Set Status Bar bg color StatusBarBridge . SetBackgroundColor ( blue ); // Set Status Bar style StatusBarBridge . SetStyle ( StatusBarStyle . Light ); API Show Show status bar static Task Show() Hide Hide status bar static Task Hide() SetBackgroundColor Set status bar background color static Task SetBackgroundColor(string color) SetStyle Set status bar text color style static Task SetStyle( StatusBarStyle style) Models StatusBarStyle public enum StatusBarStyle { Dark , Light }","title":"Status Bar"},{"location":"platforms/capacitor/bridge/status_bar/#status-bar","text":"iOS, Android The StatusBar API Provides methods for configuring the style of the Status Bar, along with showing or hiding it.","title":"Status Bar"},{"location":"platforms/capacitor/bridge/status_bar/#methods","text":"StatusBarBridge.Show() StatusBarBridge.Hide() StatusBarBridge.SetBackgroundColor() StatusBarBridge.SetStyle()","title":"Methods"},{"location":"platforms/capacitor/bridge/status_bar/#example","text":"// Show Status Bar StatusBarBridge . Show (); // Hide Status Bar StatusBarBridge . Hide (); // Set Status Bar bg color StatusBarBridge . SetBackgroundColor ( blue ); // Set Status Bar style StatusBarBridge . SetStyle ( StatusBarStyle . Light );","title":"Example"},{"location":"platforms/capacitor/bridge/status_bar/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/status_bar/#show","text":"Show status bar static Task Show()","title":"Show"},{"location":"platforms/capacitor/bridge/status_bar/#hide","text":"Hide status bar static Task Hide()","title":"Hide"},{"location":"platforms/capacitor/bridge/status_bar/#setbackgroundcolor","text":"Set status bar background color static Task SetBackgroundColor(string color)","title":"SetBackgroundColor"},{"location":"platforms/capacitor/bridge/status_bar/#setstyle","text":"Set status bar text color style static Task SetStyle( StatusBarStyle style)","title":"SetStyle"},{"location":"platforms/capacitor/bridge/status_bar/#models","text":"","title":"Models"},{"location":"platforms/capacitor/bridge/status_bar/#statusbarstyle","text":"public enum StatusBarStyle { Dark , Light }","title":"StatusBarStyle"},{"location":"platforms/capacitor/bridge/storage/","text":"Storage iOS, Android, Electron, PWA The Storage API provides a key-value store for simple data. Mobile OS's may periodically clear data set in window.localStorage , so this API should be used instead of window.localStorage . This API will fall back to using localStorage when running as a Progressive Web App. Note: this API is not meant for high-performance data storage applications. Take a look at using SQLite, Realm or a separate data engine if your application will store a lot of items, have high read/write load, or require complex querying. Working with JSON Storage works on Strings only. However, storing JSON blobs is easy: just JSON.stringify the object before calling set , then JSON.parse the value returned from get . See the example below for more details. This method can also be used to store non-string values, such as numbers and booleans. Methods StorageBridge.Clear() StorageBridge.Get() StorageBridge.Set() StorageBridge.Keys() StorageBridge.Remove() Example // Store some data var data = new DataClass { data = Some Data For Testing }; StorageBridge . Set ( data , data ); StorageBridge . Set ( string , a string ); StorageBridge . Set ( object , new { type = object , model = anonymous , arr = new [] { an , array } }); StorageBridge . Set ( number , 123 ); // Read data var d = await StorageBridge . Get DataClass ( data ); Console . WriteLine ( $ data: {d}.data={d.data} ); var s = await StorageBridge . Get string ( string ); Console . WriteLine ( $ string: {s} ); var o = await StorageBridge . Get object ( object ); Console . WriteLine ( $ object: {o} ); var n = await StorageBridge . Get long ( number ); Console . WriteLine ( $ number: {n} ); // Remove entry from storage StorageBridge . Remove ( object ); // Retrieve available keys var keys = await StorageBridge . Keys (); keys . ToList (). ForEach ( Console . WriteLine ); // Clear all data StorageBridge . Clear (); API Clear Clear stored keys and values. static Task Clear() Get Get the value with the given key. static Task T Get T (string key) Set Set the value for the given key static Task Set T (string key, T value) Keys Return the list of known keys static Task string[] Keys() Remove Remove the value for this key (if any) static Task Remove(string key)","title":"Storage"},{"location":"platforms/capacitor/bridge/storage/#storage","text":"iOS, Android, Electron, PWA The Storage API provides a key-value store for simple data. Mobile OS's may periodically clear data set in window.localStorage , so this API should be used instead of window.localStorage . This API will fall back to using localStorage when running as a Progressive Web App. Note: this API is not meant for high-performance data storage applications. Take a look at using SQLite, Realm or a separate data engine if your application will store a lot of items, have high read/write load, or require complex querying.","title":"Storage"},{"location":"platforms/capacitor/bridge/storage/#working-with-json","text":"Storage works on Strings only. However, storing JSON blobs is easy: just JSON.stringify the object before calling set , then JSON.parse the value returned from get . See the example below for more details. This method can also be used to store non-string values, such as numbers and booleans.","title":"Working with JSON"},{"location":"platforms/capacitor/bridge/storage/#methods","text":"StorageBridge.Clear() StorageBridge.Get() StorageBridge.Set() StorageBridge.Keys() StorageBridge.Remove()","title":"Methods"},{"location":"platforms/capacitor/bridge/storage/#example","text":"// Store some data var data = new DataClass { data = Some Data For Testing }; StorageBridge . Set ( data , data ); StorageBridge . Set ( string , a string ); StorageBridge . Set ( object , new { type = object , model = anonymous , arr = new [] { an , array } }); StorageBridge . Set ( number , 123 ); // Read data var d = await StorageBridge . Get DataClass ( data ); Console . WriteLine ( $ data: {d}.data={d.data} ); var s = await StorageBridge . Get string ( string ); Console . WriteLine ( $ string: {s} ); var o = await StorageBridge . Get object ( object ); Console . WriteLine ( $ object: {o} ); var n = await StorageBridge . Get long ( number ); Console . WriteLine ( $ number: {n} ); // Remove entry from storage StorageBridge . Remove ( object ); // Retrieve available keys var keys = await StorageBridge . Keys (); keys . ToList (). ForEach ( Console . WriteLine ); // Clear all data StorageBridge . Clear ();","title":"Example"},{"location":"platforms/capacitor/bridge/storage/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/storage/#clear","text":"Clear stored keys and values. static Task Clear()","title":"Clear"},{"location":"platforms/capacitor/bridge/storage/#get","text":"Get the value with the given key. static Task T Get T (string key)","title":"Get"},{"location":"platforms/capacitor/bridge/storage/#set","text":"Set the value for the given key static Task Set T (string key, T value)","title":"Set"},{"location":"platforms/capacitor/bridge/storage/#keys","text":"Return the list of known keys static Task string[] Keys()","title":"Keys"},{"location":"platforms/capacitor/bridge/storage/#remove","text":"Remove the value for this key (if any) static Task Remove(string key)","title":"Remove"},{"location":"platforms/capacitor/bridge/toast/","text":"Toast iOS, Android, Electron, PWA The Toast API provides a notification pop up for displaying important information to a user. Just like real toast! Methods ToastBridge.ShowWithShortDuration() ToastBridge.ShowWithLongDuration() Example // Open a toast that sticks for a shorter period ToastBridge . ShowWithShortDuration ( A \ud83c\udf77 to... ); // Open a toast that sticks for a longer period ToastBridge . ShowWithLongDuration ( \ud83d\udd25 Blazor \ud83d\udd25 ); API ShowWithShortDuration Display a toastr for a short period of time. static Task string ShowWithShortDuration(string message) ShowWithLongDuration Display a toastr for a longer period of time. static Task string ShowWithLongDuration(string message)","title":"Toast"},{"location":"platforms/capacitor/bridge/toast/#toast","text":"iOS, Android, Electron, PWA The Toast API provides a notification pop up for displaying important information to a user. Just like real toast!","title":"Toast"},{"location":"platforms/capacitor/bridge/toast/#methods","text":"ToastBridge.ShowWithShortDuration() ToastBridge.ShowWithLongDuration()","title":"Methods"},{"location":"platforms/capacitor/bridge/toast/#example","text":"// Open a toast that sticks for a shorter period ToastBridge . ShowWithShortDuration ( A \ud83c\udf77 to... ); // Open a toast that sticks for a longer period ToastBridge . ShowWithLongDuration ( \ud83d\udd25 Blazor \ud83d\udd25 );","title":"Example"},{"location":"platforms/capacitor/bridge/toast/#api","text":"","title":"API"},{"location":"platforms/capacitor/bridge/toast/#showwithshortduration","text":"Display a toastr for a short period of time. static Task string ShowWithShortDuration(string message)","title":"ShowWithShortDuration"},{"location":"platforms/capacitor/bridge/toast/#showwithlongduration","text":"Display a toastr for a longer period of time. static Task string ShowWithLongDuration(string message)","title":"ShowWithLongDuration"},{"location":"tutorials/tutorials/","text":"Snap Notes This tutorial covers app creation, development and deployment as PWA, iOS and Android apps. Coming soon.","title":"Snap Notes"},{"location":"tutorials/tutorials/#snap-notes","text":"This tutorial covers app creation, development and deployment as PWA, iOS and Android apps. Coming soon.","title":"Snap Notes"},{"location":"updates/","text":"Videos Bionic Monitor Release and demo Bionic Monitor provides live reloading capability to both Standalone and Hosted Blazor projects. The above demo did not make use of Bionic Monitor configuration file but once set it does not require one to pass command line arguments to Bionic Monitor. Bionic 1.0.18 release and PWA demo Published: Aug 29, 2018 What's new this week: Bionic 1.0.18 release PWA integration Blazor Layout generation Fixed several issues found while trying to have app deployed as a PWA. This video also shows current effort to create a tutorial app that will be available in new documentation site. New bionic command: bionic generate layout MyLayout Bionic Docs and Bridge Published: Aug 18, 2018 What's new this week: Documentation is now available at here Bionic Capacitor Plugin now provides bridge init command that allows for device level functionality. You can read more here This video also shows current effort to create a tutorial app that will be available in new documentation site. New Capacitor plugin commands: bionic platform capacitor bridge init From 0 to iOS with Bionic Published: Aug 10, 2018 What's new this week: Introduces ios support through capacitor platform plugin Demonstrates current effort in exposing capacitor device level functionality to Blazor apps New Capacitor plugin commands: bionic platform capacitor android sync bionic platform capacitor ios init bionic platform capacitor ios build bionic platform capacitor ios sync bionic platform capacitor ios open Bionic 1.0.17 - From 0 to Android with Bionic Published: Aug 3, 2018 What's new on version 1.0.17 Fixed Services issue broken since Blazor 0.5 Introduces [Injectable] attribute for Services Introduces capacitor platform plugin Capacitor plugin commands: bionic platform capacitor init bionic platform capacitor android init bionic platform capacitor android build bionic platform capacitor android open Bionic 1.0.16 - From 0 to Electron with Bionic Published: Jul 27, 2018 What's new on version 1.0.16 Plugin Architecture - Plugins are fetched and loaded from NuGet. Introduces bionic platform command Introduces electron platform plugin Introduces blast scripting Added Maintenance Commands: bionic blast [target] bionic platform add [short-plugin-name] Electron plugin commands: bionic platform electron init bionic platform electron build bionic platform electron serve Bionic 1.0.12 - First maintenance and dev commands Published: July 17 2018 Version 1.0.12 adds support for both Standalone and Hosted Blazor projects as well as plethora of new commands: Maintenance commands bionic --version bionic docs bionic info bionic serve bionic uninstall bionic update bionic -h Development commands bionic start bionic serve bionic generate page MyPage bionic generate component MyComponent bionic generate service MyService bionic -g Bionic - Ionic CLI clone for Blazor Published: Jul 8, 2018 Bionic aims to be an Ionic CLI clone for Blazor projects. As of now, it only allows to easy add and style Blazor components.","title":"Videos"},{"location":"updates/#videos","text":"","title":"Videos"},{"location":"updates/#bionic-monitor-release-and-demo","text":"Bionic Monitor provides live reloading capability to both Standalone and Hosted Blazor projects. The above demo did not make use of Bionic Monitor configuration file but once set it does not require one to pass command line arguments to Bionic Monitor.","title":"Bionic Monitor Release and demo"},{"location":"updates/#bionic-1018-release-and-pwa-demo","text":"","title":"Bionic 1.0.18 release and PWA demo"},{"location":"updates/#published-aug-29-2018","text":"","title":"Published: Aug 29, 2018"},{"location":"updates/#whats-new-this-week","text":"Bionic 1.0.18 release PWA integration Blazor Layout generation Fixed several issues found while trying to have app deployed as a PWA. This video also shows current effort to create a tutorial app that will be available in new documentation site.","title":"What's new this week:"},{"location":"updates/#new-bionic-command","text":"bionic generate layout MyLayout","title":"New bionic command:"},{"location":"updates/#bionic-docs-and-bridge","text":"","title":"Bionic Docs and Bridge"},{"location":"updates/#published-aug-18-2018","text":"","title":"Published: Aug 18, 2018"},{"location":"updates/#whats-new-this-week_1","text":"Documentation is now available at here Bionic Capacitor Plugin now provides bridge init command that allows for device level functionality. You can read more here This video also shows current effort to create a tutorial app that will be available in new documentation site.","title":"What's new this week:"},{"location":"updates/#new-capacitor-plugin-commands","text":"bionic platform capacitor bridge init","title":"New Capacitor plugin commands:"},{"location":"updates/#from-0-to-ios-with-bionic","text":"","title":"From 0 to iOS with Bionic"},{"location":"updates/#published-aug-10-2018","text":"","title":"Published: Aug 10, 2018"},{"location":"updates/#whats-new-this-week_2","text":"Introduces ios support through capacitor platform plugin Demonstrates current effort in exposing capacitor device level functionality to Blazor apps","title":"What's new this week:"},{"location":"updates/#new-capacitor-plugin-commands_1","text":"bionic platform capacitor android sync bionic platform capacitor ios init bionic platform capacitor ios build bionic platform capacitor ios sync bionic platform capacitor ios open","title":"New Capacitor plugin commands:"},{"location":"updates/#bionic-1017-from-0-to-android-with-bionic","text":"","title":"Bionic 1.0.17 - From 0 to Android with Bionic"},{"location":"updates/#published-aug-3-2018","text":"","title":"Published: Aug 3, 2018"},{"location":"updates/#whats-new-on-version-1017","text":"Fixed Services issue broken since Blazor 0.5 Introduces [Injectable] attribute for Services Introduces capacitor platform plugin","title":"What's new on version 1.0.17"},{"location":"updates/#capacitor-plugin-commands","text":"bionic platform capacitor init bionic platform capacitor android init bionic platform capacitor android build bionic platform capacitor android open","title":"Capacitor plugin commands:"},{"location":"updates/#bionic-1016-from-0-to-electron-with-bionic","text":"","title":"Bionic 1.0.16 - From 0 to Electron with Bionic"},{"location":"updates/#published-jul-27-2018","text":"","title":"Published: Jul 27, 2018"},{"location":"updates/#whats-new-on-version-1016","text":"Plugin Architecture - Plugins are fetched and loaded from NuGet. Introduces bionic platform command Introduces electron platform plugin Introduces blast scripting","title":"What's new on version 1.0.16"},{"location":"updates/#added-maintenance-commands","text":"bionic blast [target] bionic platform add [short-plugin-name]","title":"Added Maintenance Commands:"},{"location":"updates/#electron-plugin-commands","text":"bionic platform electron init bionic platform electron build bionic platform electron serve","title":"Electron plugin commands:"},{"location":"updates/#bionic-1012-first-maintenance-and-dev-commands","text":"","title":"Bionic 1.0.12 - First maintenance and dev commands"},{"location":"updates/#published-july-17-2018","text":"Version 1.0.12 adds support for both Standalone and Hosted Blazor projects as well as plethora of new commands:","title":"Published: July 17 2018"},{"location":"updates/#maintenance-commands","text":"bionic --version bionic docs bionic info bionic serve bionic uninstall bionic update bionic -h","title":"Maintenance commands"},{"location":"updates/#development-commands","text":"bionic start bionic serve bionic generate page MyPage bionic generate component MyComponent bionic generate service MyService bionic -g","title":"Development commands"},{"location":"updates/#bionic-ionic-cli-clone-for-blazor","text":"","title":"Bionic - Ionic CLI clone for Blazor"},{"location":"updates/#published-jul-8-2018","text":"Bionic aims to be an Ionic CLI clone for Blazor projects. As of now, it only allows to easy add and style Blazor components.","title":"Published: Jul 8, 2018"}]}